(page "index.html"
      (:require #_[ui.tabs :as tabs]
                [ajax.core :as ajax]
                [clojure.string :as str]))

#_(ns hoplon.index
  (:require-macros [tailrecursion.javelin :refer :all]
                   [tailrecursion.hoplon :refer :all])
  (:require [ajax.core :as ajax]
            [tailrecursion.javelin :refer :all]
            [tailrecursion.hoplon :refer :all]))

(enable-console-print!)

(def server-url "http://localhost:3000/")

;; state

(defc farms [])
(defc selected-farm-id nil)
(defc plots [])
(defc selected-plot-id nil)
(defc until-date #inst "1993-09-30")
(defc irrigation-data [[1 4 22] [2 5 10] [11 7 30]])
(defc temp-irrigation-data [nil nil nil])
(defc session-token nil)

(cell= (println "plots: " plots))
(cell= (println session-token))
(cell= (println "selected-plot-id: " selected-plot-id))
(cell= (println "temp-irrigation-data: " temp-irrigation-data))

;; util

(defn date-str [date]
  (-> date .toJSON (.split,,, "T") first))

(defn is-leap-year [year]
  (= 0 (rem (- 2012 year) 4)))

(defn indexed [col]
  (->> col
       (interleave (range) ,,,)
       (partition 2 ,,,)))

(defn val-event [event]
  (-> event .-target .-value))

(defn calc-and-download []
  (let [url (str server-url "auth-api/calculate"
                 "?farm-id=" @selected-farm-id
                 "&plot-id=" @selected-plot-id
                 "&until-date=" (date-str @until-date)
                 "&irrigation-data="(prn-str @irrigation-data))]
    (-> js/window
        (.open ,,, url))))

(defn sim-and-download []
  (let [url (str "rest/farms/111/plots/" @selected-plot-id ".csv"
                 ;"?format=csv"
                 "?sim=true&until-date=" (date-str @until-date))]
    (-> js/window
        (.open ,,, url))))

(defn remove-irrigation-row [row-no]
  (reset! irrigation-data (->> @irrigation-data
                               (keep-indexed #(when-not (= %1 row-no) %2) ,,,)
                               (into [] ,,,))))

(defn add-irrigation-row [_]
  (swap! irrigation-data conj @temp-irrigation-data)
  (reset! temp-irrigation-data [nil nil nil]))

(defn error-alert
  [error]
  (js/alert (str "Error: " error)))

(defn request-headers []
  {"Accept" "application/edn"
   "X-Auth-Token" @session-token})

(ajax/POST "http://localhost:3000/login"
           {:headers {"Accept" "application/edn"
                      "Content-Type" "application/x-www-form-urlencoded"}
            :params {:username "zalf"
                     :password "fLAz"}
            :handler #(reset! session-token (:session-token %))
            :error-handler #(js/alert (str "Error: " %))})

;get all farm ids
(cell= (when session-token
         (ajax/GET "http://localhost:3000/data/farms/"
                   {:headers (request-headers)
                    :handler #(do
                               (reset! ~(cell farms) %)
                               (reset! ~(cell selected-farm-id) (-> farms first :farm/id)))
                    :error-handler error-alert})))

(defn update-plots
  [new-plots]
  (reset! plots new-plots)
  (reset! selected-plot-id (first new-plots)))

;if a farm is being selected get all plots of this farm
(cell= (when selected-farm-id
         (ajax/GET (str "http://localhost:3000/data/farms/" selected-farm-id "/plots/")
                   {:headers (request-headers)
                    :handler update-plots
                    :error-handler error-alert})))



;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod tailrecursion.hoplon/do! :selected
  [elem key value]
  (let [e (js/jQuery elem)
        k (name key)]
    (cond
     (= false value) (.removeAttr e k)
     (= true value) (.attr e k k)
     :else (.attr e k (str value)))))

(defn create-option
  [value selected-value & [display-value]]
  (option :value value
          :selected (cell= (= value selected-value))
          (text "~(or display-value value)")))

(defn create-irrigation-inputs [row-no day month amount]
  (let [template? (nil? row-no)]
    (div
      (div
        :class "col-xs-2"
        (input
          :class "form-control"
          :type "number"
          :placeholder "Tag"
          :value day
          :data-id "day"
          :on-change #(if template?
                       (swap! temp-irrigation-data assoc-in [0] (val-event %))
                       (swap! irrigation-data assoc-in [@row-no 0] (val-event %)))))
      (div
        :class "col-xs-2"
        (input
          :class "form-control"
          :type "number"
          :placeholder "Monat"
          :value month
          :data-id "month"
          :on-change #(if template?
                       (swap! temp-irrigation-data assoc-in [1] (val-event %))
                       (swap! irrigation-data assoc-in [@row-no 1] (val-event %)))))
      (div
        :class "col-xs-2"
        (input
          :class "form-control"
          :type "number"
          :placeholder "Menge [mm]"
          :value amount
          :data-id "amount"
          :on-change #(if template?
                       (swap! temp-irrigation-data assoc-in [2] (val-event %))
                       (swap! irrigation-data assoc-in [@row-no 2] (val-event %)))))
      (input
        :class "btn btn-default"
        :type "button"
        :value (if template? "Zeile hinzuf√ºgen" "Zeile entfernen")
        :on-click (if template? add-irrigation-row (partial remove-irrigation-row @row-no))))))



(html
  (head
    (meta :name "viewport" :content "width=device-width, initial-scale=1")
    (link :rel "stylesheet" :href "css/bootstrap.css"))
  (body

    (div
      :class "container"

      (h1 "BEREST Webservice Test Client")
      (hr)

      (form
        :role "form"
        :class "form-horizontal"
        :name "test-data-form"

        (div
          :class "form-group"
          (label :for "farm-id" :class "col-sm-2 control-label" "Betrieb")
          (div
            :class "col-xs-3"
            (select
              :id "farm-id"
              :class "form-control" ;:on-change #(swap! state assoc :weather-year 0)
              (loop-tpl :bindings [{fid  :farm/id
                                    name :farm/name} farms]
                        (create-option fid @selected-farm-id name)))))

        (div
          :class "form-group"
          (label :for "plot" :class "col-sm-2 control-label" "Schlag")
          (div
            :class "col-xs-3"
            (select
              :id "plot"
              :class "form-control" ;:on-change #(swap! state assoc :weather-year 0)
              (loop-tpl :bindings [{pid  :plot/id
                                    name :plot/name} plots]
                        (create-option pid @selected-plot-id name)))))


        (div
          :class "form-group"
          (label :for "until-day" :class "col-sm-2 control-label" "Rechnen bis Datum")
          (div
            :class "col-xs-2"
            (input
              :id "until-date"
              :type "date"
              :placeholder "Datum"
              :value (date-str @until-date)
              :on-change #(reset! until-date (js/Date. (val-id "until-date"))))))


        (fieldset
          (legend "Beregnungsdaten")
          (div
            :class "form-group"
            (div :id "irrigation-data-list"
                 (loop-tpl :bindings [[row-no [day month amount]] (cell= (indexed irrigation-data))]
                           (create-irrigation-inputs row-no day month amount)))
            (apply create-irrigation-inputs nil (cell-map identity temp-irrigation-data))))

        (hr)

        (div
          :class "form-group"
          (div
            :class "col-sm-4"
            (input
              :class "btn btn-primary btn-lg"
              :type "button"
              :on-click calc-and-download
              :value "Berechnen & CSV-Downloaden"))
          (div
            :class "col-sm-4"
            (input
              :class "btn btn-primary btn-lg"
              :type "button"
              :on-click sim-and-download
              :value "Simulieren & CSV-Downloaden"))

          (div
            :class "col-sm-4"
            (a
              :class "btn btn-primary btn-lg"
              :href "https://dl.dropboxusercontent.com/u/29574974/Weberest/output-analysis.xlsx"
               "Analyse Excel-File herunterladen")))))))




