(page "index.html"
      (:require #_[ui.tabs :as tabs]
                [ajax.core :as ajax]))

#_(ns hoplon.index
  (:require-macros [tailrecursion.javelin :refer :all]
                   [tailrecursion.hoplon :refer :all])
  (:require [ajax.core :as ajax]
            [tailrecursion.javelin :refer :all]
            [tailrecursion.hoplon :refer :all]))

(enable-console-print!)

(def server-url "http://localhost:3000/")

(defc state
      {:farms []
       :selected-farm-id nil
       :plots []
       :selected-plot-id nil
       :until-day-month [10 10]
       :weather-year 1993
       :irrigation-data [[1 4 22] [2 5 10] [11 7 30]]})

(cell= (println "state: " state))

(defc temp-irrigation-data [nil nil nil])
(cell= (println "temp-irrigation-data: " temp-irrigation-data))


(defn is-leap-year [year]
  (= 0 (rem (- 2012 year) 4)))

(defn indexed [col]
  (->> col
       (interleave (range) ,,,)
       (partition 2 ,,,)))

(defn val-event [event]
  (-> event .-target .-value))

(defn calc-and-download []
  (let [{sel-farm-id :selected-farm-id
         sel-plot-id :selected-plot-id
         [day month] :until-day-month
         year :weather-year} @state
        url (str server-url "auth-api/calculate"
                 ;"?format=csv"
                 "?farm-id=" sel-farm-id
                 "&plot-id=" sel-plot-id
                 "&until-day=" day "&until-month=" month
                 "&year=" year
                 "&irrigation-data="(prn-str (:irrigation-data state)))]
    (-> js/window
        (.open ,,, url))))

(defn sim-and-download []
  (let [[day month] (:until-day-month @state)
        wy (by-id "weather-year")
        url (str "rest/farms/111/plots/" (:selected-plot-id @state) ".csv"
                 ;"?format=csv"
                 "?sim=true&until-day=" day "&until-month=" month
                 "&weather-year=" (js/parseInt (.-value (.item (.-options wy) (.-selectedIndex wy))))) #_(:weather-year state)]
    (-> js/window
        (.open ,,, url))))

(defn remove-irrigation-row [row-no]
  (swap! state assoc :irrigation-data
         (->> (:irrigation-data @state)
              (keep-indexed #(when-not (= %1 row-no) %2) ,,,)
              (into [] ,,,))))

(defn add-irrigation-row [_]
  (swap! state update-in [:irrigation-data] conj @temp-irrigation-data)
  (reset! temp-irrigation-data [nil nil nil]))

(defc session-token nil)
(cell= (println session-token))

(defn request-headers []
  {"Accept" "application/edn"
   "X-Auth-Token" @session-token})

(ajax/POST "http://localhost:3000/login"
           {:headers {"Accept" "application/edn"
                      "Content-Type" "application/x-www-form-urlencoded"}
            :params {:username "zalf"
                     :password "fLAz"}
            :handler #(reset! session-token (:session-token %))
            :error-handler #(js/alert (str "Error: " %))})

;get all farm ids
(cell= (when session-token
         (ajax/GET "http://localhost:3000/data/farms/"
                   {:headers (request-headers)
                    :handler #(do
                               (swap! ~(cell state) assoc :farms %)
                               (swap! ~(cell state) assoc :selected-farm-id
                                      (-> state :farms first :farm/id)))
                    :error-handler #(js/alert (str "Error: " %))})))

;if a farm is being selected get all plots of this farm
(cell= (when (:selected-farm-id state)
         (ajax/GET (str "http://localhost:3000/data/farms/" (:selected-farm-id state) "/plots/")
                   {:headers (request-headers)
                    :handler #(do
                               (swap! ~(cell state) assoc :plots %)
                               (swap! ~(cell state) assoc :selected-plot-id
                                      (-> state :plots first)))
                    :error-handler #(js/alert (str "Error: " %))})))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defmethod tailrecursion.hoplon/do! :selected
  [elem key value]
  (let [e (js/jQuery elem)
        k (name key)]
    (cond
     (= false value) (.removeAttr e k)
     (= true value) (.attr e k k)
     :else (.attr e k (str value)))))

(defn create-option
  [value selected-value & [display-value]]
  (option :value value
          :selected (cell= (= value selected-value))
          (text "~(or display-value value)")))

(defn create-irrigation-inputs [row-no day month amount]
  (let [template? (nil? row-no)]
    (div
      (div
        :class "col-xs-2"
        (input
          :class "form-control"
          :type "number"
          :placeholder "Tag"
          :value day
          :data-id "day"
          ;:data-row-no row-no
          :on-change #(if template?
                       (swap! temp-irrigation-data assoc-in [0] (val-event %))
                       (swap! state assoc-in [:irrigation-data @row-no 0] (val-event %)))))
      (div
        :class "col-xs-2"
        (input
          :class "form-control"
          :type "number"
          :placeholder "Monat"
          :value month
          :data-id "month"
          ;:data-row-no row-no
          :on-change #(if template?
                       (swap! temp-irrigation-data assoc-in [1] (val-event %))
                       (swap! state assoc-in [:irrigation-data @row-no 1] (val-event %)))))
      (div
        :class "col-xs-2"
        (input
          :class "form-control"
          :type "number"
          :placeholder "Menge [mm]"
          :value amount
          :data-id "amount"
          ;:data-row-no row-no
          :on-change #(if template?
                       (swap! temp-irrigation-data assoc-in [2] (val-event %))
                       (swap! state assoc-in [:irrigation-data @row-no 2] (val-event %)))))
      (input
        :class "btn btn-default"
        :type "button"
        ;:data-row-no row-no
        :value (if template? "Zeile hinzufügen" "Zeile entfernen")
        :on-click (if template? add-irrigation-row (partial remove-irrigation-row @row-no))))))



#_(js/setInterval #(swap! state update-in [:plot-ids] conj "a") 3000)

(defc= year (:weather-year state))
(defc= until-day (-> state :until-day-month first))
(defc= until-month (-> state :until-day-month second))



(html
  (head
    (meta :name "viewport" :content "width=device-width, initial-scale=1")
    (link :rel "stylesheet" :href "css/bootstrap.css"))
  (body

    (div
      :class "container"

      (form
        :role "form"
        :class "form-horizontal"
        :name "test-data-form"

        (div
          :class "form-group"
          (label :for "farm-id" :class "col-sm-2 control-label" "Betrieb")
          (div
            :class "col-xs-3"
            (select
              :id "farm-id"
              :class "form-control" ;:on-change #(swap! state assoc :weather-year 0)
              (loop-tpl :bindings [{fid  :farm/id
                                    name :farm/name} (cell= (:farms state))]
                        (create-option fid (:selected-farm-id @state) name)))))

        (div
          :class "form-group"
          (label :for "plot" :class "col-sm-2 control-label" "Schlag")
          (div
            :class "col-xs-3"
            (select
              :id "plot"
              :class "form-control" ;:on-change #(swap! state assoc :weather-year 0)
              (loop-tpl :bindings [{pid  :plot/id
                                    name :plot/name} (cell= (:plots state))]
                        (create-option pid (:selected-plot-id @state) name)))))


        (div
          :class "form-group"
          (label :for "until-day" :class "col-sm-2 control-label" "Rechnen bis Datum")
          (div
            :class "col-xs-1"
            (input :id "until-day"
                   :class "form-control"
                   :type "number"
                   :placeholder "Tag"
                   :value @until-day
                   :on-change #(swap! state assoc-in [:until-day-month 0] (val-id "until-day"))))
          (div
            :class "col-xs-1"
            (input :id "until-month"
                   :class "form-control"
                   :type "number"
                   :placeholder "Monat"
                   :value @until-month
                   :on-change #(swap! state assoc-in [:until-day-month 1] (val-id "until-month")))))

        (div
          :class "form-group"
          (label :for "year" :class "col-sm-2 control-label" "Wetterdaten für Jahr")
          (div
            :class "col-xs-2"
            (select
              :id "year"
              :class "form-control"
              (for [y (range 1993 (inc 1998))]
                (create-option y @year (str y))))))

        (fieldset
          (legend "Beregnungsdaten")
          (div
            :class "form-group"
            (div :id "irrigation-data-list"
                 (loop-tpl :bindings [[row-no [day month amount]] (cell= (indexed (:irrigation-data state)))]
                           (create-irrigation-inputs row-no day month amount)))
            (apply create-irrigation-inputs nil (cell-map identity temp-irrigation-data))))

        (div
          :class "form-group"
          (div
            :class "col-sm-4"
            (input
              :class "btn btn-primary btn-lg"
              :type "button"
              :on-click calc-and-download
              :value "Berechnen & CSV-Downloaden"))
          (div
            :class "col-sm-4"
            (input
              :class "btn btn-primary btn-lg"
              :type "button"
              :on-click sim-and-download
              :value "Simulieren & CSV-Downloaden"))

          (div
            :class "col-sm-4"
            (a
              :class "btn btn-primary"
              :href "https://dl.dropboxusercontent.com/u/29574974/Weberest/output-analysis.xlsx"
               "Analyse Excel-File herunterladen")))))))




