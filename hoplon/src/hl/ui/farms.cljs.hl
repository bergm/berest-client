(ns ui.farms
  (:require [cljs-time.core :as cstc]
            [cljs-time.format :as cstf]
            [cljs-time.coerce :as cstcoe]
            [de.zalf.berest.client.hoplon.util :as util]
            [de.zalf.berest.client.hoplon.state :as s]
            [ui.elements :as uie]
            [ui.components :as uic]
            [ui.farm :as farm]
            [ui.plot :as plot]
            [ui.plot-annual :as plot-annual]
            [bootstrap-util :as bs]))


(defn vocab
  "translatable vocabulary for this page"
  [element lang]
  (get-in {:new-farm-filter-value {:lang/de "Neuer Betriebsname"
                                   :lang/en "New farm name"}

           :th-farm-name {:lang/de "Betriebsname"
                          :lang/en "Farm name"}

           :th-farm-state {:lang/de "Zustand"
                           :lang/en "State"}

           :th-plot-name {:lang/de "Schlagsname"
                          :lang/en "Plot name"}

           :th-plot-number {:lang/de "Schlagnummer"
                            :lang/en "Plot number"}

           :th-plot-state {:lang/de "Zustand"
                           :lang/en "State"}

           :new-farm-button {:lang/de "Neuer Betrieb"
                             :lang/en "New farm"}
           :new-plot-button {:lang/de "Neuer Schlag"
                             :lang/en "New plot"}
           :new-plot-annual-button {:lang/de "Neues Jahr"
                                    :lang/en "New year"}

           :delete-plot-button {:lang/de "S. löschen"
                                :lang/en "Delete plot"}

           :delete-farm-button {:lang/de "B. löschen"
                                :lang/en "Delete farm"}

           :new-farm-header {:lang/de "Neuen Betrieb anlegen"
                             :lang/en "Create new farm"}

           :query-label {:lang/de "Suche"
                         :lang/en "Search"}
           :query-placeholder {:lang/de "Achtung LEERE SUCHE!! Alle Betriebe anzeigen kann lange dauern!!!"
                                :lang/en "Attention EMPTY SEARCH!! Showing all farms might take long!!!"}

           :farm-data-label {:lang/de "Betriebsdaten:"
                             :lang/en "Farm data:"}

           :plot-data-label {:lang/de "Schlagstammdaten:"
                             :lang/en "Plot base data:"}

           :annual-plot-data-label {:lang/de "Jährliche Schlagdaten:"
                                    :lang/en "Annual plot data:"}


           :no-farm-name-label {:lang/de "??? Betrieb ohne Name ???"
                                :lang/en "??? Farm without name ???"}
           :no-plot-name-label {:lang/de "??? Schlag ohne Name ???"
                                :lang/en "??? Plot without name ???"}

           :annual-years-label {:lang/de "des Jahres"
                                :lang/en "of year"}

           :name-label {:lang/de "Name"
                        :lang/en "Name"}
           :name-placeholder {:lang/de "Name der Fruchtart"
                              :lang/en "Name of crop"}

           :symbol-label {:lang/de "Symbol"
                        :lang/en "Symbol"}
           :symbol-placeholder {:lang/de "Symbol der Fruchtart"
                              :lang/en "Symbol of crop"}

           :show-data {:lang/de "Daten anzeigen"
                       :lang/en "Show data"}

           :show-farm-details {:lang/de "Betriebs-Details anzeigen"
                               :lang/en "Show detailed farm data"}

           :show-plot-details {:lang/de "Schlag-Details anzeigen"
                               :lang/en "Show detailed plot data"}

           :show-plot-annual-details {:lang/de "Beregnungsberatungsdetails anzeigen"
                                      :lang/en "Show irrigation management details"}


           :edit {:lang/de "Ändern"
                  :lang/en "Edit"}
           :save-edit {:lang/de "Änderungen speichern"
                       :lang/en "Save changes"}
           :chart-header {:lang/de "Wetterdaten"
                          :lang/en "Weather data"}
           :chart-subheader {:lang/de "Quelle: DWD Station"
                             :lang/en "Source: DWD station"}

           :dc {:lang/de "BEREST DC Code"
                :lang/en "BEREST DC code"}

           :cover-degree {:lang/de "Bedeckungsgrad"
                          :lang/en "Cover degree"}

           :extraction-depth {:lang/de "Entzugstiefe"
                              :lang/en "Extraction depth"}

           :aet-pet {:lang/de "Quotient AET/PET"
                     :lang/en "Quotient AET/PET"}

           :transpiration-factor {:lang/de "Transpirations-Faktor"
                                  :lang/en "Transpiration factor"}
           }
          [element (or lang :lang/de)] "UNKNOWN element"))


(defn farms-pane
  []
  (let [filter-criterium (cell {:attr :farm/name
                                :value ""})
        fc-count (cell= (count (:value filter-criterium)))
        lc-filter-criterium (cell= (.toLowerCase (:value filter-criterium)))
        fc-first-char (cell= (.charAt lc-filter-criterium 0))
        filtered-farms (cell= (if (> fc-count 0)
                                (filter (fn [[farm-id farm {name :farm/name}]]
                                          (let [value (-> :attr filter-criterium farm)]
                                            ;include farms in resultset, whose name is missing
                                            (if value
                                              (let [lc-name (.toLowerCase value)]
                                                (if (> fc-count 1)
                                                  (> (.search lc-name lc-filter-criterium) -1)
                                                  (= (.charAt lc-name 0) fc-first-char)))
                                              true)))
                                        (:farms s/state))
                                (:farms s/state)))

         edit-new-farm? (cell false)
         no-edit-new-farm? (cell= (not edit-new-farm?))

         name (cell nil)
         notes (cell nil)

         new-farm-no (cell 0)

         [new-farm-id new-plot-id query-id] (repeatedly gensym)

         selected-farm (cell nil)
         _ (cell= (when-let [fid (:farm-id s/route-params)]
                            (when-let [fs (:farms s/state)]
                                      (when-let [f (fs (UUID. fid))]
                                                (reset! ~(cell selected-farm) f)))))
         ;_ (cell= (println "selected-farm: " (pr-str selected-farm)))

         selected-plot (cell nil)
         _ (cell= (when-let [pid (:plot-id s/route-params)]
                            (when-let [ps (:plots selected-farm)]
                                      (when-let [p (ps (UUID. pid))]
                                                (reset! ~(cell selected-plot) p)))))
         ;_ (cell= (println "selected-plot: " (pr-str selected-plot)))

         farms-count (cell= (count (:farms s/state)))
         many-farms? (cell= (> farms-count 1))
         _ (cell= (when (= farms-count 1) (reset! selected-farm (second (first (:farms s/state))))))
         ]

    (div
      :id "farms-pane"
      :do-toggle (cell= (= s/route "#/farms"))

      (bs/form
        :opts [:horizontal]
        :toggle many-farms?

        (bs/form-group
          (div
            :class "col-xs-offset-1 form-control-static"
            :col [:xs 11]
            (for [c (range 65 91)]
              (button
                :type "button"
                :class "btn btn-link"
                :on-click #(reset! filter-criterium {:attr :farm/name
                                                     :value (char c)})
                (char c)))))

        (bs/form-group
          (bs/control-label :col [:xs 1] :for query-id (text "~(vocab :query-label s/lang)"))
          (div
            :col [:xs 11]
            (input
              :id query-id
              :class "form-control"
              :type "text"
              :placeholder (cell= (vocab :query-placeholder s/lang))
              :value (cell= (:value filter-criterium))
              :on-change #(reset! filter-criterium {:attr :farm/name
                                                    :value (val-id query-id)})))))

      (div
        :class "row"
        :toggle many-farms?
        (div
          :col [:xs 12]
          (hr)))

      (div
        :class "row"

        (div
          :col [:xs 11]

          (table
            :class "table"
            :toggle many-farms?

            (thead
              (tr
                (th (text "~(vocab :th-farm-name s/lang)"))
                (th (text "~(vocab :th-farm-state s/lang)"))))

            (tbody
              (loop-tpl
                :bindings [[_ {id :farm/id
                               name :farm/name
                               :as farm}] (cell= (sort-by #(-> % second :farm/name) filtered-farms))]
                (let [hover? (cell false)
                      selected? (cell= (= id (:farm/id selected-farm)))]
                     (tr
                       :class (cell= {:warning (and hover? (not selected?))
                                      :success selected?})
                       :mouseenter #(reset! hover? true)
                       :mouseleave #(reset! hover? false)
                       :click #(dosync
                                (s/set-route-params :farm-id @id)
                                (reset! selected-farm @farm)
                                (reset! selected-plot nil))

                       (td (text "~(or name id)"))
                       (td (span :class "glyphicon glyphicon-ok"))))))))

        (div
          :col [:xs 1]

          (button
            :class "btn btn-warning btn-block"
            :click #(let [temp-farm-name (str (vocab :new-farm-filter-value @s/lang) " "
                                              (swap! new-farm-no inc))]
                         (s/create-new-farm temp-farm-name)
                         (reset! filter-criterium {:attr :farm/name
                                                   :value temp-farm-name})
                         #_(swap! edit-new-farm? not))
            (text "~(vocab :new-farm-button s/lang)"))))

      (div
        :class "row"
        :toggle (cell= (not (nil? selected-farm)))

        (div :col [:xs 12] (hr)))

      (cell-let [{farm-db-id :db/id
                  farm-id :farm/id
                  farm-name :farm/name
                  addresses :farm/addresses
                  farm-notes :farm/notes
                  authorative-weather-station :farm/authorative-weather-station
                  weather-station :farm/weather-station
                  weather-data :farm/weather-data
                  :as farm} selected-farm]
                (let [farm-details-visible? (cell false)
                      plots-count (cell= (count (:plots selected-farm)))
                      many-plots? (cell= (> plots-count 1))
                      _ (cell= (when (= plots-count 1) (reset! ~(cell selected-plot) (second (first (:plots selected-farm))))))]
                     [(div
                        :class "row"
                        :toggle (cell= (not (nil? selected-farm)))

                        (div
                          :col [:xs 11]

                          (uic/hover-activate-wrapper
                            :action! #(swap! farm-details-visible? not)
                            (h3
                              (text "~(vocab :farm-data-label s/lang) ~(when farm-name farm-name) ~(when-not farm-details-visible? \" ...\")"))))

                        (div
                          :col [:xs 1]

                          (uic/safe-delete-button
                            :action! #(do (println "delete farm id: " @farm-id " name: " @farm-name)
                                          (s/delete-db-entity @farm-db-id))
                            :value (cell= (vocab :delete-farm-button s/lang s/lang)))))

                      (farm/farm
                        :toggle (cell= (and selected-farm farm-details-visible?))
                        :fields {:id farm-id
                                 :name farm-name :name! #(s/update-db-entity @farm-db-id :farm/name %)
                                 :addresses addresses
                                 :notes farm-notes :notes! #(s/update-db-entity @farm-db-id :farm/notes %)

                                 :authorative-weather-station authorative-weather-station
                                 :authorative-weather-station! #(s/update-db-entity @farm-db-id :farm/authorative-weather-station %)

                                 :weather-station weather-station
                                 :weather-station! #(s/update-db-entity @farm-db-id :farm/weather-station %)

                                 :weather-data weather-data}
                        :opts {:edit? true
                               :label-cols 2
                               :value-cols 3})

                      (div
                        :class "row"
                        :toggle (cell= (not (nil? selected-farm))) #_many-plots?
                        (div
                          :col [:xs 12]
                          (hr)))

                      (div
                        :class "row"
                        :toggle (cell= (not (nil? selected-farm)))

                        (div
                          :col [:xs 11]

                          (table
                            :class "table"
                            :toggle many-plots?

                            (thead
                              (tr
                                (th (text "~(vocab :th-plot-name s/lang)"))
                                (th (text "~(vocab :th-plot-number s/lang)"))
                                (th (text "~(vocab :th-plot-state s/lang)"))))

                            (tbody
                              (loop-tpl
                                :bindings [[_ {plot-id :plot/id
                                               plot-name :plot/name
                                               plot-number :plot/number
                                               :as plot}] (cell= (sort-by :plot/name (:plots farm)))]
                                (let [hover? (cell false)
                                      selected? (cell= (= plot-id (:plot/id selected-plot)))]
                                     (tr
                                       :class (cell= {:warning (and hover? (not selected?))
                                                      :success selected?})
                                       :mouseenter #(reset! hover? true)
                                       :mouseleave #(reset! hover? false)
                                       :click #(do
                                                (s/set-route-params :plot-id @plot-id)
                                                (reset! selected-plot @plot))

                                       (td (text "~(or plot-name plot-id)"))
                                       (td (text "~(or plot-number \"\")"))
                                       (td (span :class "glyphicon glyphicon-ok"))))))))

                        (div
                          :col [:xs 1]
                          (button
                            ;:toggle farm-hover?
                            ;:style "float:right"
                            :class "btn btn-warning btn-block"
                            :click #(s/create-new-plot @farm-id)
                            (text "~(vocab :new-plot-button s/lang)"))))

                      (div
                        :class "row"
                        :toggle (cell= (not (nil? selected-farm)))

                        (div :col [:xs 12] (hr)))

                      (cell-let
                        [{plot-db-id :db/id
                          plot-id :plot/id
                          plot-name :plot/name
                          number :plot/number
                          description :plot/description
                          short-description :plot/short-description
                          crop-area :plot/crop-area
                          irrigation-area :plot/irrigation-area
                          stt :plot/stt
                          slope :plot/slope
                          field-capacities :plot/field-capacities
                          fc-pwp-unit :plot/fc-pwp-unit
                          permanent-wilting-points :plot/permanent-wilting-points
                          pwp-unit :plot/pwp-unit
                          ka5-soil-types :plot/ka5-soil-types
                          groundwaterlevel :plot/groundwaterlevel
                          annuals :plot/annuals
                          weather-station :plot/weather-station
                          weather-data :plot/weather-data
                          location-coords :plot/location-coords
                          notes :plot/notes
                          az-glz :plot/az-glz
                          nft :plot/nft
                          bse :plot/bse
                          sse :plot/sse
                          bwb :plot/bwb
                          irrigation-well :plot/irrigation-well} selected-plot]
                        (let [[annual-years-id] (repeatedly gensym)

                              plot-details-visible? (cell false)]

                             [(div
                                :class "row"
                                :toggle (cell= (not (nil? selected-farm)))

                                (div
                                  :col [:xs 11]

                                  (uic/hover-activate-wrapper
                                    :action! #(swap! plot-details-visible? not)
                                    (h4
                                      (text "~(vocab :plot-data-label s/lang) ~(when plot-name plot-name) ~(when-not plot-details-visible? \" ...\")"))))

                                (div
                                  :col [:xs 1]
                                  ;:style "background: blue"
                                  ;:class "pull-right"

                                  (uic/safe-delete-button
                                    :action! #(do (println "delete plot id: " @plot-id " name: " @plot-name)
                                                  (s/delete-db-entity @plot-db-id))
                                    :value (cell= (vocab :delete-plot-button s/lang)))))

                              (plot/plot
                                :toggle (cell= (and selected-farm plot-details-visible?))
                                :fields {:id plot-id
                                         :name plot-name :name! #(s/update-db-entity @plot-db-id :plot/name %)
                                         :number number :number! #(s/update-db-entity @plot-db-id :plot/number %)
                                         :description description :description! #(s/update-db-entity @plot-db-id :plot/description %)

                                         :short-description short-description
                                         :short-description! #(s/update-db-entity @plot-db-id :plot/short-description %)

                                         :crop-area crop-area :crop-area! #(s/update-db-entity @plot-db-id :plot/crop-area %)

                                         :irrigation-area irrigation-area
                                         :irrigation-area! #(s/update-db-entity @plot-db-id :plot/irrigation-area %)

                                         :stt stt :stt! #(s/update-db-entity @plot-db-id :plot/stt [:soil.stt/key %])
                                         :slope slope :slope! #(s/update-db-entity @plot-db-id :plot/slope [:slope/key %])

                                         :field-capacities field-capacities
                                         ;:field-capacities! #(s/update-db-entity @db-id :plot/field-capacities %)

                                         :fc-pwp-unit fc-pwp-unit :fc-pwp-unit! #(s/update-db-entity @plot-db-id :plot/fc-pwp-unit %)

                                         :permanent-wilting-points permanent-wilting-points
                                         ;:permanent-wilting-points! #(s/update-db-entity @db-id :plot/permanent-wilting-points %)

                                         :pwp-unit pwp-unit :pwp-unit! #(s/update-db-entity @plot-db-id :plot/pwp-unit %)

                                         :ka5-soil-types ka5-soil-types
                                         :ka5-soil-types! #(s/update-db-entity @plot-db-id :plot/ka5-soil-types %)

                                         :groundwaterlevel groundwaterlevel
                                         :groundwaterlevel! #(s/update-db-entity @plot-db-id :plot/groundwaterlevel %)

                                         :annuals annuals

                                         :weather-station weather-station
                                         :weather-station! #(s/update-db-entity @plot-db-id :plot/weather-station %)

                                         :weather-data weather-data

                                         :location-coords location-coords
                                         :location-coords! #(s/update-db-entity @plot-db-id :plot/location-coords %)

                                         :notes notes :notes! #(s/update-db-entity @plot-db-id :plot/notes %)

                                         :az-glz az-glz :az-glz! #(s/update-db-entity @plot-db-id :plot/az-glz %)
                                         :nft nft :nft! #(s/update-db-entity @plot-db-id :plot/nft %)
                                         :bse bse :bse! #(s/update-db-entity @plot-db-id :plot/bse %)
                                         :sse sse :sse! #(s/update-db-entity @plot-db-id :plot/sse %)
                                         :bwb bwb :bwb! #(s/update-db-entity @plot-db-id :plot/bwb %)

                                         ;:irrigation-well irrigation-well
                                         ;irrigation-well! #(s/update-db-entity @db-id :plot/irrigation-well %)
                                         }
                                :opts {:edit? true
                                       :label-cols 2
                                       :value-cols 3})

                              (div
                                :class "row"
                                :toggle (cell= (not (nil? selected-farm)))

                                (div :col [:xs 12] (hr)))

                              (let [recalc-count (cell 0)
                                    _ (cell= (println "recalc-count: " recalc-count))

                                    _ (cell= (print "annuals: " (pr-str annuals)))

                                    annual-years (cell= (->> annuals
                                                             (map :plot.annual/year ,,,)
                                                             sort))
                                    _ (cell= (print "annual-years: " (pr-str annual-years)))

                                    annual-plot-details-visible?* (cell true)
                                    annual-plot-details-visible? (cell= (and (seq annual-years)
                                                                             annual-plot-details-visible?*))

                                    current-year (.getFullYear (js/Date.))

                                    selected-annual-year* (cell nil)
                                    _ (cell= (when-let [year (:year s/route-params)]
                                                       (reset! ~(cell selected-annual-year*) (js/parseInt year))))
                                    selected-annual-year (cell= (or selected-annual-year*
                                                                    ((into #{} annual-years) current-year)
                                                                    (last annual-years)))
                                    ;_ (cell= (println "selected-annual-year: " selected-annual-year))

                                    selected-annual (cell= (first (filter #(= selected-annual-year (:plot.annual/year %)) annuals)))
                                    _ (cell= (when (and selected-plot selected-annual) (swap! ~(cell recalc-count) inc)))
                                    ;_ (cell= (println "selected-annual: " (pr-str selected-annual)))
                                    ]

                                   [(div
                                      :class "row"
                                      :toggle (cell= (not (nil? selected-farm)))

                                      (div
                                        :col [:xs 3]

                                        (uic/hover-activate-wrapper
                                          :action! #(swap! annual-plot-details-visible?* not)
                                          (h4
                                            (text "~(vocab :annual-plot-data-label s/lang) ~(when plot-name plot-name) ~(when-not annual-plot-details-visible? \" ...\")"))))

                                      (div
                                        :col [:xs 1]
                                        (select
                                          :id annual-years-id
                                          :class "form-control"
                                          :on-change #(let [year (js/parseInt (val-id annual-years-id))]
                                                       (s/set-route-params :year year)
                                                       (reset! selected-annual-year* year))
                                          (loop-tpl
                                            :bindings [year annual-years]
                                            (option :value year
                                                    :selected (cell= (= year selected-annual-year))
                                                    (text "~{year}")))))

                                      #_(div :col [:xs 8])

                                      (div
                                        :col [:xs 1]
                                        :class "col-xs-offset-7"
                                        (button
                                          :class "btn btn-warning btn-block"
                                          :click #(s/create-new-plot-annual @plot-id)
                                          (text "~(vocab :new-plot-annual-button s/lang)"))))

                                    (cell-let
                                      [{ann-db-id :db/id
                                        year :plot.annual/year
                                        abs-day-of-initial-soil-moisture-measurement :plot.annual/abs-day-of-initial-soil-moisture-measurement
                                        initial-soil-moistures :plot.annual/initial-soil-moistures
                                        initial-sm-unit :plot.annual/initial-sm-unit
                                        technology :plot.annual/technology
                                        crop-instances :plot.annual/crop-instances
                                        donations :plot.annual/donations} selected-annual]

                                      (plot-annual/plot-annual
                                        :style "margin-top: 20px"
                                        :toggle (cell= (and selected-farm annual-plot-details-visible?))
                                        :fields {:plot-id plot-id

                                                 :db-id ann-db-id

                                                 :year year :year! #(s/update-db-entity @ann-db-id :plot.annual/year %)

                                                 :abs-day-of-initial-soil-moisture-measurement abs-day-of-initial-soil-moisture-measurement
                                                 :abs-day-of-initial-soil-moisture-measurement! #(s/update-db-entity @ann-db-id :plot.annual/abs-day-of-initial-soil-moisture-measurement %)

                                                 :initial-soil-moistures initial-soil-moistures

                                                 :initial-sm-unit initial-sm-unit
                                                 :initial-sm-unit! #(s/update-db-entity @ann-db-id :plot.annual/initial-sm-unit %)

                                                 :technology technology

                                                 :crop-instances crop-instances

                                                 :donations donations

                                                 :weather-data (cell= (filter #(= year (cstc/year (cstcoe/from-date (:weather-data/date %))))
                                                                              weather-data))

                                                 :recalc-count recalc-count}
                                        :opts {:edit? true
                                               :label-cols 2
                                               :value-cols 3}))])]))])))))