(ns ui.elements
  (:require [cljs-time.core :as cstc]
            [cljs-time.format :as cstf]
            [cljs-time.coerce :as cstcoe]
            [bootstrap-util :as bs]
            [de.zalf.berest.client.hoplon.util :as util]
            [de.zalf.berest.client.hoplon.state :as s]))


(defn vocab
  "translatable vocabulary for this page"
  [element lang]
  (get-in {:add-layer-label {:lang/de "Schicht hinzufügen"
                             :lang/en "Add layer"}
           :remove-layer-label {:lang/de "Schicht entfernen"
                                :lang/en "Remove layer"}
           :add-donation-label {:lang/de "Gabe hinzufügen"
                             :lang/en "Add donation"}
           :remove-donation-label {:lang/de "Gabe entfernen"
                                :lang/en "Remove donation"}
           :depth-placeholder {:lang/de "Tiefe"
                               :lang/en "Depth"}
           :value-placeholder {:lang/de "Wert"
                               :lang/en "Value"}
           :abs-day-placeholder {:lang/de "Datum der Wassergabe"
                                 :lang/en "Date of donation"}
           :amount-placeholder {:lang/de "Menge der Gabe"
                               :lang/en "Amount of donation"}
           :dc-placeholder {:lang/de "DC"
                            :lang/en "DC"}
           :add-dc-assertion-label {:lang/de "DC Stadium hinzufügen"
                                    :lang/en "Add DC assertion"}
           :remove-dc-assertion-label {:lang/de "DC Stadium entfernen"
                                       :lang/en "Remove DC assertion"}

           :locked?-donation-label {:lang/de "Gesperrt?"
                                    :lang/en "Locked?"}

           :tavg-placeholder {:lang/de "Tmit"
                              :lang/en "Tavg"}

           :globrad-placeholder {:lang/de "Globalstrahlung"
                                 :lang/en "Global radiation"}

           :evap-placeholder {:lang/de "Verdunstung"
                             :lang/en "Evaporation"}

           :precip-placeholder {:lang/de "Niederschlag"
                                :lang/en "Precipitation"}

           :prog?-label {:lang/de "Prognose?"
                         :lang/en "Prognosis?"}

           :remove-weather-data-label {:lang/de "Entfernen"
                                       :lang/en "Remove"}

           :add-weather-data-label {:lang/de "Hinzufügen"
                                    :lang/en "Add"}

           :weather-data-label {:lang/de "Datensätze"
                                :lang/en "Datasets"}

           }
          [element (or lang :lang/de)] "UNKNOWN element"))



(defmethod tailrecursion.hoplon/do! :selected
           [elem key value]
           (let [e (js/jQuery elem)
                 k (name key)]
                (cond
                  (= false value) (.removeAttr e k)
                  (= true value) (.attr e k k)
                  :else (.attr e k (str value)))))

(defmethod tailrecursion.hoplon/do! :disabled
           [elem key value]
           (let [e (js/jQuery elem)
                 k (name key)]
                (cond
                  (= false value) (.removeAttr e k)
                  (= true value) (.attr e k k)
                  :else (.attr e k (str value)))))

(defmethod tailrecursion.hoplon/do! :checked
           [elem key value]
           (let [e (js/jQuery elem)
                 k (name key)]
                (cond
                  (= false value) (.removeAttr e k)
                  (= true value) (.attr e k k)
                  :else (.attr e k (str value)))))

(defn create-option
  [value selected-value & [display-value]]
  (option :value value
          :selected (cell= (= value selected-value))
          (text "~(or display-value value)")))



(defn create-irrigation-inputs
  [row-no add-or-remove-row!
   day set-day!
   month set-month!
   amount set-amount!]

  (let [[day-id month-id amount-id] (repeatedly gensym)]
    (div
      (div
        :class "col-xs-2"
        (input
          :id day-id
          :class "form-control"
          :type "number"
          :placeholder "Tag"
          :value day
          :on-change #(set-day! (some-> row-no deref) (js/parseInt (val-id day-id)))))
      (div
        :class "col-xs-2"
        (input
          :id month-id
          :class "form-control"
          :type "number"
          :placeholder "Monat"
          :value month
          :on-change #(set-month! (some-> row-no deref) (js/parseInt (val-id month-id)))))
      (div
        :class "col-xs-2"
        (input
          :id amount-id
          :class "form-control"
          :type "number"
          :placeholder "Menge [mm]"
          :value amount
          :on-change #(set-amount! (some-> row-no deref) (js/parseInt (val-id month-id)))))

      (input
        :class "btn btn-default"
        :type "button"
        :value (if row-no "Zeile entfernen" "Zeile hinzufügen")
        :on-click #(add-or-remove-row! (some-> row-no deref))))))


(defelem
  create-ka5-inputs
  [{{:keys [row-no row-action!
            depth depth!
            value value!]} :fields
    opts :opts
    :as attrs} kids]

  (let [[depth-id value-id] (repeatedly gensym)]
    ((div
       :class "row"
       (div
         :col [:xs 4]
         (div
           :class "input-group"
           (input
             :id depth-id
             :class "form-control"
             :type "number"
             :placeholder (cell= (vocab :depth-placeholder s/lang))
             :step 1
             :min 0
             :max 200
             :value depth
             :on-change #(depth! (js/parseInt (val-id depth-id))))
           (span :class "input-group-addon" "cm")))

       (div
         :col [:xs 4]
         (select
           :id value-id
           :class "form-control"
           :on-change #(value! (val-id value-id))
           (option "")
           (for #_loop-tpl
                #_:bindings [[name _] (sort-by #(-> first :soil.type.ka5/name) @s/ka5-soil-types)]
             (option :value name
                     :selected (cell= (= name value))
                     (text "~{name}")))))

       (div
         :col [:xs 4]
         (input
           :class (cell= {:btn true
                          :btn-danger (not (nil? row-no))
                          :btn-warning (nil? row-no)})
           :type "button"
           :value (cell= (if row-no (vocab :remove-layer-label s/lang) (vocab :add-layer-label s/lang)))
           :on-click #(row-action! (some-> row-no deref)))))
     (dissoc attrs :fields :opts) kids)))


(defelem
  create-soil-data-inputs
  [{{:keys [row-no row-action!
            unit
            depth depth!
            value value!]} :fields
    opts :opts
    :as attrs} kids]

  (let [[depth-id value-id] (repeatedly gensym)]
    ((div
       :class "row"
       (div
         :col [:xs 4]
         (div
           :class "input-group"
           (input
             :id depth-id
             :class "form-control"
             :type "number"
             :placeholder (cell= (vocab :depth-placeholder s/lang))
             :step 1
             :min 0
             :max 200
             :value depth
             :on-change #(depth! (js/parseInt (val-id depth-id))))
           (span :class "input-group-addon" "cm")))

       (div
         :col [:xs 4]
         (div
           :class "input-group"
           (input
             :id value-id
             :class "form-control"
             :type "number"
             :placeholder (cell= (vocab :value-placeholder s/lang))
             :step 0.1
             :min 0
             :value value
             :on-change #(value! (js/parseFloat (val-id value-id))))
           (span :class "input-group-addon" (text "~{unit}"))))

       (div
         :col [:xs 4]
         (input
           :class (cell= {:btn true
                          :btn-danger (not (nil? row-no))
                          :btn-warning (nil? row-no)})
           :type "button"
           :value (cell= (if row-no (vocab :remove-layer-label s/lang) (vocab :add-layer-label s/lang)))
           :on-click #(row-action! (some-> row-no deref)))))
     (dissoc attrs :fields :opts) kids)))


(defelem
  create-donation-inputs
  [{{:keys [row-no row-action!
            year
            abs-day abs-day!
            amount amount!
            locked? locked?!]} :fields
    opts :opts
    :as attrs} kids]

  (let [[abs-day-id amount-id locked?-id] (repeatedly gensym)]
    ((div
       :class "row"
       (div
         :col [:xs 4]
         (input
           :id abs-day-id
           :class "form-control"
           :type "date"
           ;:placeholder (cell= (vocab :abs-day-placeholder s/lang))
           :value (cell= (if (and abs-day year)
                           (->> (util/doy->cljs-time-date abs-day year)
                                (cstf/unparse (cstf/formatters :date),,,))
                           (str year "-01-01")))
           :on-change #(abs-day! (util/cljs-time-date->doy (cstf/parse (cstf/formatters :date)
                                                                       (val-id abs-day-id))))))

       (div
         :col [:xs 3]
         (div
           :class "input-group"
           (input
             :id amount-id
             :class "form-control"
             :type "number"
             :placeholder (cell= (vocab :amount-placeholder s/lang))
             :step 0.1
             :min 0
             :value amount
             :on-change #(amount! (js/parseFloat (val-id amount-id))))
           (span :class "input-group-addon" "mm")))

       (div
         :col [:xs 2]
         (label
           :class "checkbox-inline"
           (input
             :id locked?-id
             ;:class "form-control"
             :type "checkbox"
             :checked locked?
             :value "lock?"
             :on-change #(locked?! (val-id locked?-id)))
           (text "~(vocab :locked?-donation-label s/lang)")))

       (div
         :col [:xs 3]
         (input
           :class (cell= {:btn true
                          :btn-danger (not (nil? row-no))
                          :btn-warning (nil? row-no)})
           :type "button"
           :value (cell= (if row-no (vocab :remove-donation-label s/lang) (vocab :add-donation-label s/lang)))
           :on-click #(row-action! (some-> row-no deref)))))
     (dissoc attrs :fields :opts) kids)))

(defelem
  create-weather-data-inputs
  [{{:keys [row-no row-action!
            date date!
            tavg tavg!
            globrad globrad!
            precip precip!
            evap evap!
            prog? prog?!]} :fields
    opts :opts
    :as attrs} kids]

  (let [[date-id tavg-id tavg-checked-id globrad-id globrad-checked-id precip-id evap-id prog?-id] (repeatedly gensym)]
       ((div
          :class "row"
          (div
            :col [:xs 2]
            (input
              :id date-id
              :class "form-control"
              :type "date"
              :value (cell= (if date
                              (cstf/unparse (cstf/formatters :date) (cstcoe/from-date date))
                              (str (cstc/year (cstc/now)) "-01-01")))
              :on-change #(date! (cstcoe/to-date (cstf/parse (cstf/formatters :date)
                                                             (val-id date-id))))))

          (div
            :col [:xs 2]
            (div
              :class "input-group"
              (input
                :id tavg-id
                :class "form-control"
                :type "number"
                :placeholder (cell= (vocab :tavg-placeholder s/lang))
                :step 0.1
                :min -70
                :max 70
                :value tavg
                :on-change #(tavg! (js/parseFloat (val-id tavg-id))))
              (span :class "input-group-addon" "°C"))
            (div
              :class "input-group"
              (input
                :id globrad-id
                :class "form-control"
                :type "number"
                :placeholder (cell= (vocab :globrad-placeholder s/lang))
                :step 0.1
                ;:min -70
                ;:max 70
                :value globrad
                :on-change #(globrad! (js/parseFloat (val-id globrad-id))))
              (span :class "input-group-addon" "J/cm²")))

          (div
            :col [:xs 2]
            (div
              :class "input-group"
              (input
                :id evap-id
                :class "form-control"
                :type "number"
                :placeholder (cell= (vocab :evap-placeholder s/lang))
                :step 0.1
                :min 0
                :value evap
                :on-change #(evap! (js/parseFloat (val-id evap-id))))
              (span :class "input-group-addon" "mm")))

          (div
            :col [:xs 2]
            (div
              :class "input-group"
              (input
                :id precip-id
                :class "form-control"
                :type "number"
                :placeholder (cell= (vocab :precip-placeholder s/lang))
                :step 0.1
                :min 0
                :value precip
                :on-change #(precip! (js/parseFloat (val-id precip-id))))
              (span :class "input-group-addon" "mm")))

          (div
            :col [:xs 1]
            (label
              :class "checkbox-inline"
              (input
                :id prog?-id
                :type "checkbox"
                :checked prog?
                :value "prog?"
                :on-change #(prog?! (val-id prog?-id)))
              (text "~(vocab :prog?-label s/lang)")))

          (div
            :col [:xs 2]
            (input
              :class (cell= {:btn true
                             :btn-danger (not (nil? row-no))
                             :btn-warning (nil? row-no)})
              :type "button"
              :value (cell= (if row-no (vocab :remove-weather-data-label s/lang) (vocab :add-weather-data-label s/lang)))
              :on-click #(row-action! (some-> row-no deref)))))
        (dissoc attrs :fields :opts) kids)))


(defelem
  create-dc-assertion-inputs
  [{{:keys [row-no row-action!
            dc->names
            year
            abs-day abs-day!
            ;at-abs-day at-abs-day!
            dc dc!]} :fields
    {:keys [#_link-abs-days
            #_hide-at-abs-day]} :opts
    :as attrs} kids]

  (let [year (cell= (or year (cstc/year (cstc/now))))
        [#_at-abs-day-id abs-day-id dc-id dc-select-id] (repeatedly gensym)]
       ((div
          :class "row"
       #_(div
         :toggle (cell= (not hide-at-abs-day))
         :col [:xs 3]
         (let [at-abs-day-str (cell= (cstf/unparse (cstf/formatter "dd.MM.")
                                                   (util/doy->cljs-time-date at-abs-day year))) ]
           (p :toggle (cell= (not (nil? row-no))) :class "form-control-static" (text "~{at-abs-day-str}")))
         (input
           :id at-abs-day-id
           :toggle (cell= (nil? row-no))
           :class "form-control"
           :type "date"
           ;:placeholder (cell= (vocab :abs-day-placeholder s/lang))
           :value (cell= (if (and at-abs-day year)
                           (cstf/unparse (cstf/formatters :date) (util/doy->cljs-time-date at-abs-day year))
                           (cstf/unparse (cstf/formatters :date) (cstc/now))))
           :on-change #(at-abs-day! (util/cljs-time-date->doy (cstf/parse (cstf/formatters :date)
                                                                          (val-id at-abs-day-id))))))

       (div
         :col [:xs 3]
         (input
           :id abs-day-id
           :class "form-control"
           :type "date"
           ;:placeholder (cell= (vocab :abs-day-placeholder s/lang))
           :value (cell= (if abs-day
                           (util/cljs-time-date->iso-y-m-d (util/doy->cljs-time-date abs-day year))
                           (if (= year (cstc/year (cstc/now)))
                             (util/cljs-time-date->iso-y-m-d (cstc/now))
                             (str year "-01-01"))))
           :on-change #(abs-day! (util/cljs-time-date->doy (cstf/parse (cstf/formatters :date)
                                                                       (val-id abs-day-id))))))

       (div
         :col [:xs 2]
         (input
           :id dc-id
           :class "form-control"
           :type "number"
           :placeholder (cell= (vocab :dc-placeholder s/lang))
           :step 1
           :min 1
           :max 100
           :value dc
           :on-change #(dc! (js/parseInt (val-id dc-id)))))

       (div
         :col [:xs 4]
         (select
           :id dc-select-id
           :class "form-control"
           :on-change #(dc! (js/parseInt (val-id dc-select-id)))
           (option :selected (cell= (nil? row-no)) "")
           (loop-tpl
             :bindings [[dc* name] (cell= (sort-by first dc->names))]
             (option :value dc*
                     :data-dc dc
                     :selected (cell= (= dc* dc))
                     (text "~{dc*} | ~{name}")))))

       (div
         :col [:xs 3]
         (input
           :class (cell= {:btn true
                          :btn-danger (not (nil? row-no))
                          :btn-warning (nil? row-no)})
           :type "button"
           :value (cell= (if row-no
                           (vocab :remove-dc-assertion-label s/lang)
                           (vocab :add-dc-assertion-label s/lang)))
           :on-click #(row-action! (some-> row-no deref))))

       ) (dissoc attrs :fields :opts) kids)))



(defelem weather-data-form-group
         [{:keys [visible? weather-data
                  id-attr id]
           :as attrs} kids]

         ((bs/form-group
           :toggle visible?
           (bs/control-label :col [:xs 2] (text "~(vocab :weather-data-label s/lang)"))
           (let [date* (cell (cstcoe/to-date (cstc/now)))
                 tavg* (cell nil)
                 globrad* (cell nil)
                 evap* (cell nil)
                 precip* (cell nil)
                 prog?* (cell false)
                 #__ #_(cell= (println "date*: " date* " tavg*: " tavg* " globrad*: " globrad*
                                   " evap*: " evap* " precip*: " precip* " prog?*: " prog?*))]
                (div
                  :col [:xs 10]

                  (loop-tpl
                    :bindings [[row-no {db-id :db/id
                                        date :weather-data/date
                                        tavg :weather-data/average-temperature
                                        globrad :weather-data/global-radiation
                                        evap :weather-data/evaporation
                                        precip :weather-data/precipitation
                                        prog-date :weather-data/prognosis-date}]
                               (cell= (util/indexed (sort-by (comp util/js-date->doy :weather-data/date) weather-data)))]
                    (create-weather-data-inputs
                      :fields {:row-no row-no
                               :row-action! #(s/delete-db-entity @db-id)
                               :date date :date! #(s/update-db-entity @db-id :weather-data/date (cstcoe/to-date %))
                               :tavg tavg :tavg! #(s/update-db-entity @db-id :weather-data/average-temperature % :value-type :double)
                               :globrad globrad :globrad! #(s/update-db-entity @db-id :weather-data/global-radiation % :value-type :double)
                               :evap evap :evap! #(s/update-db-entity @db-id :weather-data/evaporation % :value-type :double)
                               :precip precip :precip! #(s/update-db-entity @db-id :weather-data/precipitation % :value-type :double)
                               :prog? (cell= (not (nil? prog-date)))
                               :prog! #(if %
                                        (s/update-db-entity @db-id :weather-data/prognosis-date date)
                                        (s/retract-db-value @db-id :weather-data/prognosis-date date))}))
                  (create-weather-data-inputs
                    :fields {:row-action! #(when (and @date* (or @evap* (and @tavg* @globrad*)) @precip*)
                                                 (s/create-new-weather-data id-attr @id @date* @tavg* @globrad*
                                                                            @evap* @precip* (when @prog?* @date*))
                                                 (reset! date* nil)
                                                 (reset! evap* nil)
                                                 (reset! tavg* nil)
                                                 (reset! globrad* nil)
                                                 (reset! precip* nil)
                                                 (reset! prog?* false))
                             :date date* :date! #(reset! date* %)
                             :tavg tavg* :tavg! #(reset! tavg* %)
                             :globrad globrad* :globrad! #(reset! globrad* %)
                             :evap evap* :evap! #(reset! evap* %)
                             :precip precip* :precip! #(reset! precip* %)
                             :prog? prog?* :prog?! #(reset! prog?* %)}))))
          (dissoc attrs :visible? :weather-data :id-attr :id) kids))















(defelem active
         [{:keys [state]} [elem]]
         (elem :do-class (cell= {:active state})))

(defelem trigger
         [{:keys [state tab]} [elem]]
         (active :state (cell= (= state tab))
                 (elem :on-click #(reset! state tab))))

(defelem content
         [{:keys [state tab]} [elem]]
         (active :state (cell= (= state tab)) elem))

(defelem tabs
         [{:keys [state] :as attr :or {state (cell 0)}} kids]
         (let [ctnr (div (dissoc attr :state))
               [trigs conts] (->> kids (partition 2) (apply map list))
               a-void #(a :href "javascript:void(0)" %)
               mktrig #(trigger :state state :tab %1 (li (a-void %2)))
               mkcont #(content :state state :tab %1 (%2 :class "tab-pane"))]
           (div (dissoc attr :state)
                (ul :class "nav nav-tabs" (map-indexed mktrig trigs))
                (div :class "tab-content" (map-indexed mkcont conts)))))
