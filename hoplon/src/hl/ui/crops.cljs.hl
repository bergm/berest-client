(ns ui.crops
  #_(:require-macros [tailrecursion.javelin :refer :all]
                   [tailrecursion.hoplon :refer :all])
  (:require #_[tailrecursion.javelin :refer :all]
            #_[tailrecursion.hoplon :refer :all]
            [de.zalf.berest.client.hoplon.util :as util]
            [de.zalf.berest.client.hoplon.state :as s]
            [ui.elements :as uie]
            [bootstrap-util :as bs]
            #_[cljs-time.coerce :as cstcoe]))


(defn vocab
  "translatable vocabulary for this page"
  [element lang]
  (get-in {:query-label {:lang/de "Suche"
                         :lang/en "Search"}
           :query-placeholder {:lang/de "Achtung LEERE SUCHE!! Alle Fruchtarten anzeigen kann lange dauern!!!"
                                :lang/en "Attention EMPTY SEARCH!! Showing all crops might take long!!!"}

           :name-label {:lang/de "Name"
                        :lang/en "Name"}
           :name-placeholder {:lang/de "Name der Fruchtart"
                              :lang/en "Name of crop"}

           :symbol-label {:lang/de "Symbol"
                        :lang/en "Symbol"}
           :symbol-placeholder {:lang/de "Symbol der Fruchtart"
                              :lang/en "Symbol of crop"}

           :show-data {:lang/de "Daten anzeigen"
                       :lang/en "Show data"}
           :edit {:lang/de "Ändern"
                  :lang/en "Edit"}
           :save-edit {:lang/de "Änderungen speichern"
                       :lang/en "Save changes"}
           :chart-header {:lang/de "Wetterdaten"
                          :lang/en "Weather data"}
           :chart-subheader {:lang/de "Quelle: DWD Station"
                             :lang/en "Source: DWD station"}

           :dc {:lang/de "BEREST DC Code"
                :lang/en "BEREST DC code"}

           :cover-degree {:lang/de "Bedeckungsgrad"
                          :lang/en "Cover degree"}

           :extraction-depth {:lang/de "Entzugstiefe"
                              :lang/en "Extraction depth"}

           :aet-pet {:lang/de "Quotient AET/PET"
                     :lang/en "Quotient AET/PET"}

           :transpiration-factor {:lang/de "Transpirations-Faktor"
                                  :lang/en "Transpiration factor"}
           }
          [element (or lang :lang/de)] "UNKNOWN element"))


(defn crops-pane
  []
  (let [filter-criterium (cell "A")
        fc-count (cell= (count filter-criterium))
        lc-filter-criterium (cell= (.toLowerCase filter-criterium))
        fc-first-char (cell= (.charAt lc-filter-criterium 0))
        filtered-crops (cell= (if (> fc-count 0)
                                (filter (fn [{name :crop/name}]
                                          ;include crops in resultset, whose name is missing
                                          (if name
                                            (let [lc-name (.toLowerCase name)]
                                              (if (> fc-count 1)
                                                (> (.search lc-name lc-filter-criterium) -1)
                                                (= (.charAt lc-name 0) fc-first-char)))
                                            true))
                                        s/minimal-all-crops)
                                s/minimal-all-crops))]

    (div
      :id "crops-pane"
      :do-toggle (cell= (= s/route "#/crops"))

      (bs/form
        :opts [:horizontal]

        (bs/form-group
          (div
            :class "col-xs-offset-1 form-control-static"
            :col [:xs 11]
            (for [c (range 65 91)]
              (button
                :type "button"
                :class "btn btn-link"
                :on-click #(reset! filter-criterium (char c))
                (char c)))))

        (bs/form-group
          (bs/control-label :col [:xs 1] :for "crop-query-input-id" (text "~(vocab :query-label s/lang)"))
          (div
            :col [:xs 11]
            (input
              :id "crop-query-input-id"
              :class "form-control"
              :type "text"
              :placeholder (cell= (vocab :query-placeholder s/lang))
              :value filter-criterium
              :on-change #(reset! filter-criterium (val-id "crop-query-input-id"))))))

      (hr)

      (bs/form
        :opts [:horizontal]
        :name "crops-form"

        (loop-tpl
          :bindings [{id :crop/id
                      name :crop/name
                      symbol :crop/symbol}
                     (cell= (sort-by :crop/name filtered-crops))]
          :bind-ids [name-id symbol-id chart-id]

          (let [data-visible? (cell false)
                edit? (cell false)
                no-edit? (cell= (not edit?))

                form-data {:name nil
                           :symbol nil}

                crop-data (cell nil)
                _ (cell= (when crop-data (println "crop-data: " (pr-str crop-data))))

                ;keep crop data in sync with currently activated elements as these
                ;are backed by stem cell state
                _ (cell= (when (and crop-data (not= id (:crop/id crop-data)))
                           (reset! ~(cell data-visible?) false)
                           (reset! ~(cell crop-data) nil)))

                chart-config {:chart {:renderTo chart-id
                                      :defaultSeriesType "line"
                                      :zoomType "x"
                                      #_:spacingTop #_50}
                              :title {:text "" #_(vocab :chart-header @s/lang)
                                      :x 0 #_-20}
                              :xAxis {:title {:text "relative DC Tage"}
                                      ;:type "datetime"
                                      #_:labels #_{:format "{value: %d.%m.%Y}"
                                             :rotation 45
                                             :align "left"}}
                              :yAxis [{:title {:text (str (vocab :dc @s/lang) " []")}}
                                      {:title {:text (str (vocab :cover-degree @s/lang) " [%]")}}
                                      {:title {:text (str (vocab :extraction-depth @s/lang) " [dm]")}}
                                      {:title {:text (str (vocab :aet-pet @s/lang) " [°C]")}
                                       :opposite true}
                                      {:title {:text (str (vocab :transpiration-factor @s/lang) " []")}
                                       :opposite true}]
                              :tooltip {:shared true
                                        :crosshairs true}
                              :legend {:layout "horizontal" #_"vertical"
                                       :align "center" #_"right"
                                       :verticalAlign "top" #_"middle"
                                       :borderWidth 0}
                              :series [{:name (vocab :dc @s/lang)
                                        :yAxis 0
                                        ;:tooltip {:valueSuffix " "}
                                        ;:color "#FF6600"
                                        :data []}
                                        {:name (vocab :cover-degree @s/lang)
                                        :yAxis 1
                                        :tooltip {:valueSuffix " %"}
                                        ;:color "#FF0000"
                                        :data []}
                                       {:name (vocab :extraction-depth @s/lang)
                                        :yAxis 2
                                        :tooltip {:valueSuffix " dm"}
                                        ;:color "blue"
                                        :data []}
                                       {:name (vocab :aet-pet @s/lang)
                                        :yAxis 3
                                        ;:tooltip {:valueSuffix " mm"}
                                        ;:color "#FF6600"
                                        :data []}
                                       {:name (vocab :transpiration-factor @s/lang)
                                        :yAxis 4
                                        ;:tooltip {:valueSuffix " "}
                                        ;:color "#FF6600"
                                        :data []}]}
                _ (with-timeout 0 (js/Highcharts.Chart. (clj->js chart-config)))

                set-series-data (fn [series-index data]
                                  (some-> chart-id
                                          by-id
                                          js/jQuery
                                          .highcharts
                                          .-series
                                          (#(nth % series-index),,,)
                                          (.setData (clj->js data))))

                dc (cell= (->> (:crop/dc-to-rel-dc-days crop-data)
                               (mapv (fn [[k v]] {:name (str "<b>" (get (:crop/dc-to-developmental-state-names crop-data) k) "</b>")
                                                  :x v :y k})
                                 ,,,)
                               (sort-by :x ,,,)))
                _ (cell= (set-series-data 0 dc))

                cover-degrees (cell= (->> (:crop/rel-dc-day-to-cover-degrees crop-data)
                                          (into [],,,)
                                          (sort-by first,,,)))
                _ (cell= (set-series-data 1 cover-degrees))

                extraction-depths (cell= (->> (:crop/rel-dc-day-to-extraction-depths crop-data)
                                              (into [],,,)
                                              (sort-by first,,,)))
                _ (cell= (set-series-data 2 extraction-depths))

                aet-pet (cell= (->> (:crop/rel-dc-day-to-quotient-aet-pets crop-data)
                                    (into [],,,)
                                    (sort-by first,,,)))
                _ (cell= (set-series-data 3 aet-pet))

                transpiration-factors (cell= (->> (:crop/rel-dc-day-to-transpiration-factors crop-data)
                                                  (into [],,,)
                                                  (sort-by first,,,)))
                _ (cell= (set-series-data 4 transpiration-factors))

                ]

            (div
              #_(button
                ;:toggle no-edit?
                :style "float:right"
                :class "btn btn-primary"
                :click #(swap! edit? not)
                (text "~(vocab :edit s/lang)"))
              #_(button
                :toggle edit?
                :style "float:right"
                :class "btn btn-danger"
                :click #()
                (text "~(vocab :save-edit s/lang)"))

              (bs/form-group
                (bs/control-label :col [:sm 2] :for name-id (text "~(vocab :name-label s/lang)"))
                (div
                  :col [:xs 3]
                  (p :toggle no-edit? :class "form-control-static" (text "~{name}"))
                  (input
                    :id name-id
                    :toggle edit?
                    :class "form-control"
                    :type "text"
                    :placeholder (cell= (vocab :name-placeholder s/lang))
                    :value name
                    :on-change #(swap! form-data assoc :name (val-id name-id)))))

              (bs/form-group
                (bs/control-label :col [:sm 2] :for symbol-id (text "~(vocab :symbol-label s/lang)"))
                (div
                  :col [:xs 3]
                  (p :toggle no-edit? :class "form-control-static" (text "~{symbol}"))
                  (input
                    :id symbol-id
                    :toggle edit?
                    :class "form-control"
                    :type "text"
                    :placeholder (cell= (vocab :symbol-placeholder s/lang))
                    :value long
                    :on-change #(swap! form-data assoc :symbol (val-id symbol-id)))))

              (div
                (span
                  :class "glyphicon glyphicon-plus"
                  :toggle (cell= (not data-visible?))
                  :on-click #(do
                              (s/load-crop-data crop-data @id)
                              (reset! data-visible? true)))
                (span
                  :toggle data-visible?
                  :class "glyphicon glyphicon-minus"
                  :click #(reset! data-visible? false))
                (span (text " ~(vocab :show-data s/lang)"))

                (div
                  :toggle data-visible?

                  (div
                    :id chart-id
                    :style "width:100%"
                    :col [:xs 12])))

              (hr)))

          )
        )
      )))