(ns ui.components
  (:require-macros [tailrecursion.javelin :refer :all]
                   [tailrecursion.hoplon :refer :all])
  (:require [tailrecursion.javelin :refer :all]
            [tailrecursion.hoplon :refer :all]
            [de.zalf.berest.client.hoplon.util :as util]
            [de.zalf.berest.client.hoplon.state :as s]
            [bootstrap-util :as bs]))

(defn vocab
  "translatable vocabulary for this page"
  [element lang]
  (get-in {:signed-in-as {:lang/de "Eingeloggt als "
                          :lang/en "Signed in as "}
           :username {:lang/de "Nutzername"
                      :lang/en "Username"}
           :user-placeholder {:lang/de "Nutzername"
                              :lang/en "Username"}
           :password {:lang/de "Passwort"
                      :lang/en "Password"}
           :pwd-placeholder {:lang/de "Passwort"
                             :lang/en "Password"}
           :nav-admin {:lang/de "Administration"
                      :lang/en "Administration"}
           :nav-news {:lang/de "Aktuell"
                         :lang/en "Current"}
           :nav-farms {:lang/de "Betriebe"
                       :lang/en "Farms"}
           :nav-weather {:lang/de "Wetterdaten"
                         :lang/en "Weather data"}
           :nav-crops {:lang/de "Fruchtarten"
                       :lang/en "Crops"}
           :nav-soils {:lang/de "BÃ¶den"
                       :lang/en "Soils"}
           :nav-archive {:lang/de "Archiv"
                         :lang/en "Archive"}
           :nav-settings {:lang/de "Einstellungen"
                          :lang/en "Settings"}
           :nav-bersim {:lang/de "IRRIGAMA.SIM"
                        :lang/en "BERSIM"}
           }
          [element (or lang :lang/de)] "UNKNOWN element"))


(defn error-pane
  []
  (div
    :id "error"
    :on-click s/clear-error!
    :do-slide-toggle s/error
    (text "~(:message s/error)")))

(defn loading-pane
  []
  (div
    :id "loading"
    :do-fade-toggle s/loading?
    "loading..."))


(defn top-nav-bar
  [page-name-label]
  (nav
    :class "navbar navbar-default"
    :role "navigation"
    (div
      :class "navbar-header"
      (button
        :type "button"
        :class "navbar-toggle"
        :data-toggle "collapse"
        :data-target ".navbar-collapse"
        (span :class "sr-only" "Toggle navigation")
        (span :class "icon-bar")
        (span :class "icon-bar")
        (span :class "icon-bar"))
      #_(img
        :class "navbar-brand"
        :style "width:90px"
        :src "irrigama-logo.png"
        :alt "Irrigama-Logo")
      (a
        :class "navbar-brand"
        :style "float: none"
        :href "#/farms"
        (img
          :style "clear: both; width:90px"
          :src "irrigama-logo.png"
          :alt "Irrigama-Logo")
        (img
          :style "clear: both; width:150px"
          :src "fbm-logo.png"
          :alt "FBM-Logo")
        (span
          :toggle s/show-content?
          :style "vertical-align: middle; font-size:24px; font-weight:bold" "IRRIGAMA.WEB")))
    (div
      :class "collapse navbar-collapse"
      (ul
        :toggle s/logged-in?
        :class "nav navbar-nav"
        (li :class (cell= {:active (= s/route "#/farms")}) (a :href "#/farms" (cell= (vocab :nav-farms s/lang))))
        (li :class (cell= {:active (= s/route "#/weather")}) (a :href "#/weather" (cell= (vocab :nav-weather s/lang))))
        (li :class (cell= {:active (= s/route "#/crops")}) (a :href "#/crops" (cell= (vocab :nav-crops s/lang))))
        (li :class (cell= {:active (= s/route "#/settings")}) (a :href "#/settings" (cell= (vocab :nav-settings s/lang))))
        (li
          :toggle s/admin-logged-in?
          :class (cell= {:active (= s/route "#/admin")})
          (a :href "#/admin" (cell= (vocab :nav-admin s/lang)))))
      (div
        :toggle s/logged-in?
        :class "navbar-right"
        (p
          :class "navbar-text" (text "~(vocab :signed-in-as s/lang)")
          (strong (text "~(:user/full-name s/user) "))
          (button
            :class "btn btn-default navbar-btn"
            :on-click #(do
                        (s/logout!)
                        (s/clear-route+params))
            "Logout"))))))

(defn login-pane
  []
  (let [[user-id pwd-id] (repeatedly gensym)]
    (div
      (div
        :id "login-pane"
        :class "center"
        :toggle s/show-login?
        :style "width:80%;"; background-image: url('irrigama-web-small.jpg'); background-size: 100%; background-repeat: no-repeat"
        #_(div :style "height: 400px")
        (bs/form
          :opts [:horizontal]
          :id "login"
          :submit #(do
                    (s/login! (val-id user-id) (val-id pwd-id))
                    (s/set-route "#/farms")
                    (do! (by-id user-id) :value "")
                    (do! (by-id pwd-id) :value ""))
          (bs/form-group
            #_(bs/control-label
              :col [:xs 2]
              :class "col-xs-offset-2"
              :for user-id
              (text "~(vocab :username s/lang)"))

            (div
              :col [:xs 3]
              ;:class "col-xs-offset-4"
              (input
                :id user-id
                :class "form-control"
                :placeholder (cell= (vocab :user-placeholder s/lang))
                :type "text"
                :autofocus "autofocus"))

            (div
              :col [:xs 3]
              :class "col-xs-offset-1"
              (input
                :id pwd-id
                :class "form-control"
                :placeholder (cell= (vocab :pwd-placeholder s/lang))
                :type "password"))

            (div
              :col [:xs 4]
              :class "col-xs-offset-1"
              (button
                :class "form-control btn btn-primary"
                :type "submit" "Login"))

            )

          #_(bs/form-group
            #_(bs/control-label
              :col [:xs 2]
              :class "col-xs-offset-2"
              :for pwd-id
              (text "~(vocab :password s/lang)"))

            (div
              :col [:xs 3]
              :class "col-xs-offset-4"
              (input
                :id pwd-id
                :class "form-control"
                :placeholder (cell= (vocab :pwd-placeholder s/lang))
                :type "password")))

          #_(bs/form-group
            (div
              :col [:xs 3]
              :class "col-xs-offset-4"
              (button
                :class "form-control btn btn-primary"
                :type "submit" "Login"))))
        #_(div :style "height: 300px")

        (div
          :class "row"

          (img
            :col [:xs 12]
            :class "img-responsive"
            :src "irrigama-web-small.jpg"))

        )

      #_(img
        :class "img-responsive"
        :src "irrigama-web-small.jpg")

      )

    #_(;img :style "z-index: 1; width: 100%" :src "irrigama-web.jpg"
     (div
           :id "login-pane"
           :class "center"
           :toggle s/show-login?
           :style "width:80%; background-image: url('irrigama-web-small.jpg'); background-size: 100%; background-repeat: no-repeat"
           (div :style "height: 400px")
           (bs/form
             :opts [:horizontal]
             :id "login"
             :submit #(do
                       (s/login! (val-id user-id) (val-id pwd-id))
                       (s/set-route "#/farms")
                       (do! (by-id user-id) :value "")
                       (do! (by-id pwd-id) :value ""))
             (bs/form-group
               #_(bs/control-label
                 :col [:xs 2]
                 :class "col-xs-offset-2"
                 :for user-id
                 (text "~(vocab :username s/lang)"))

               (div
                 :col [:xs 3]
                 :class "col-xs-offset-4"
                 (input
                   :id user-id
                   :class "form-control"
                   :placeholder (cell= (vocab :user-placeholder s/lang))
                   :type "text"
                   :autofocus "autofocus")))

             (bs/form-group
               #_(bs/control-label
                 :col [:xs 2]
                 :class "col-xs-offset-2"
                 :for pwd-id
                 (text "~(vocab :password s/lang)"))

               (div
                 :col [:xs 3]
                 :class "col-xs-offset-4"
                 (input
                   :id pwd-id
                   :class "form-control"
                   :placeholder (cell= (vocab :pwd-placeholder s/lang))
                   :type "password")))

             (bs/form-group
               (div
                 :col [:xs 3]
                 :class "col-xs-offset-4"
                 (button
                   :class "form-control btn btn-primary"
                   :type "submit" "Login"))))
           (div :style "height: 300px")))))


(defelem safe-delete-button
      [{:keys [action! value small-button?]
        :as attrs} kids]
      ((let [checked? (cell false)
             checked-id (gensym)]
            (div
              :class "input-group"
              (input
                :type "button"
                :class (cell= {:form-control true
                               :btn true
                               :btn-danger true
                               :btn-block true
                               :btn-sm (if small-button? small-button? false)
                               :disabled (not checked?)})
                :click #(do
                         (reset! checked? false)
                         (action!))
                :value value)
              (span
                :id checked-id
                :class "input-group-addon"
                (input
                  :type "checkbox"
                  :value checked?
                  :change #(reset! checked? #_(val-id checked-id) (-> % .-target .-checked))))))
       (dissoc attrs :action! :value :small-button?) kids))

(defelem hover-activate-wrapper
         [{:keys [action!]
           :as attrs} [elem]]
         (let [hover? (cell false)]
              ((elem
                 :mouseenter #(reset! hover? true)
                 :mouseleave #(reset! hover? false)
                 :class (cell= {:bg-warning hover?})
                 :click #(action!)) (dissoc attrs :action!))))

(defelem hover-toggle-panel
         [{:keys [action! toggle-cell]
           :as attrs} [header & body]]
         (let [hover? (cell false)
               body-visible? (if toggle-cell toggle-cell (cell false))]
           ((div
             :class (cell= {:panel true
                            :panel-default (and (not hover?) (not body-visible?))
                            :panel-warning (and hover? (not body-visible?))
                            :panel-success body-visible?})
             (div
               :class "panel-heading"
               :mouseenter #(reset! hover? true)
               :mouseleave #(reset! hover? false)
               :click #(do
                        (swap! body-visible? not)
                        (when action!
                          (action!)))
               (header))

             (div
               :class "panel-body"
               body))
            (dissoc attrs :action! :toggle-cell))))