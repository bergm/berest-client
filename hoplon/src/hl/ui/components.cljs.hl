(ns ui.components
  (:require-macros [tailrecursion.javelin :refer :all]
                   [tailrecursion.hoplon :refer :all])
  (:require [tailrecursion.javelin :refer :all]
            [tailrecursion.hoplon :refer :all]
            [de.zalf.berest.client.hoplon.util :as util]
            [de.zalf.berest.client.hoplon.state :as s]
            [bootstrap-util :as bs]))

(defn vocab
  "translatable vocabulary for this page"
  [element lang]
  (get-in {:signed-in-as {:lang/de "Eingeloggt als "
                          :lang/en "Signed in as "}
           :username {:lang/de "Nutzername"
                      :lang/en "Username"}
           :password {:lang/de "Passwort"
                      :lang/en "Password"}
           :nav-admin {:lang/de "Administration"
                      :lang/en "Administration"}
           :nav-news {:lang/de "Aktuell"
                         :lang/en "Current"}
           :nav-farms {:lang/de "Betriebe"
                       :lang/en "Farms"}
           :nav-weather {:lang/de "Wetterdaten"
                         :lang/en "Weather data"}
           :nav-crops {:lang/de "Fruchtarten"
                       :lang/en "Crops"}
           :nav-soils {:lang/de "BÃ¶den"
                       :lang/en "Soils"}
           :nav-archive {:lang/de "Archiv"
                         :lang/en "Archive"}
           :nav-settings {:lang/de "Einstellungen"
                          :lang/en "Settings"}
           :nav-bersim {:lang/de "IRRIGAMA.SIM"
                        :lang/en "BERSIM"}
           }
          [element (or lang :lang/de)] "UNKNOWN element"))


(defn error-pane
  []
  (div
    :id "error"
    :on-click s/clear-error!
    :do-slide-toggle s/error
    (text "~(:message s/error)")))

(defn loading-pane
  []
  (div
    :id "loading"
    :do-fade-toggle s/loading?
    "loading..."))


(defn top-nav-bar
  [page-name-label]
  (nav
    :class "navbar navbar-default"
    :role "navigation"
    (div
      :class "navbar-header"
      (button
        :type "button"
        :class "navbar-toggle"
        :data-toggle "collapse"
        :data-target ".navbar-collapse"
        (span :class "sr-only" "Toggle navigation")
        (span :class "icon-bar")
        (span :class "icon-bar")
        (span :class "icon-bar"))
      #_(img
        :class "navbar-brand"
        :style "width:90px"
        :src "irrigama-logo.png"
        :alt "Irrigama-Logo")
      (a
        :class "navbar-brand"
        :style "float: none"
        :href "#"
        (img
          :style "clear: both; width:90px"
          :src "irrigama-logo.png"
          :alt "Irrigama-Logo") #_(text "~{page-name-label}")
        (span :style "font-size:24px; font-weight:bold" "IRRIGAMA.WEB"))

      )
    (div
      :class "collapse navbar-collapse"
      (ul
        :class "nav navbar-nav"
        (li :class (cell= {:active (= s/route "#/admin")}) (a :href "#/admin" (cell= (vocab :nav-admin s/lang))))
        (li :class (cell= {:active (= s/route "#/farms")}) (a :href "#/farms" (cell= (vocab :nav-farms s/lang))))
        (li :class (cell= {:active (= s/route "#/weather")}) (a :href "#/weather" (cell= (vocab :nav-weather s/lang))))
        (li :class (cell= {:active (= s/route "#/crops")}) (a :href "#/crops" (cell= (vocab :nav-crops s/lang))))
        (li :class (cell= {:active (= s/route "#/settings")}) (a :href "#/settins" (cell= (vocab :nav-settings s/lang))))
        (li :class (cell= {:active (= s/route "#/bersim")}) (a :href "#/bersim" (cell= (vocab :nav-bersim s/lang))))
        #_(li (button :click #(s/get-state) "Reload user state"))
        #_(li (a :href "/home" "Home"))
        #_(li (a :href "" "other quick-link")))
      (div
        :do-toggle s/logged-in?
        :class "navbar-right"
        (p
          :class "navbar-text" (text "~(vocab :signed-in-as s/lang)")
          (strong (text "~(:user/full-name s/user) "))
          (button
            ;:href "javascript:void(0)"
            :class "btn btn-default navbar-btn"
            :on-click #(s/logout!)
            "Logout"))))))

(defn left-nav-bar
  []
  (div
    :id "navigation"
    :col [:sm 2]
    (ul
      :class "nav nav-pills nav-stacked"
      (li :class (cell= {:active (= s/route "#/news")}) (a :href "#/news" (cell= (vocab :nav-news s/lang))))
      (li :class (cell= {:active (= s/route "#/farms")}) (a :href "#/farms" (cell= (vocab :nav-farms s/lang))))
      (li :class (cell= {:active (= s/route "#/weather")}) (a :href "#/weather" (cell= (vocab :nav-weather s/lang))))
      (li :class (cell= {:active (= s/route "#/crops")}) (a :href "#/crops" (cell= (vocab :nav-crops s/lang))))
      #_(li :class (cell= {:active (= s/route "#/soils")}) (a :href "#/soils" (cell= (vocab :nav-soils s/lang))))
      #_(li :class (cell= {:active (= s/route "#/archive")}) (a :href "#/archive" (cell= (vocab :nav-archive s/lang))))
      (li :class (cell= {:active (= s/route "#/settings")}) (a :href "#/settins" (cell= (vocab :nav-settings s/lang))))
      (li :class (cell= {:active (= s/route "#/bersim")}) (a :href "#/bersim" (cell= (vocab :nav-bersim s/lang)))))))


(defn login-pane
  []
  (div
    :id "login-pane"
    :class "center"
    :do-toggle s/show-login?
    :style "width:70%"
    (bs/form
      :opts [:horizontal]
      :id "login"
      :on-submit #(s/login! (val-id "user") (val-id "pwd"))
      (bs/form-group
        (bs/control-label :col [:sm 2] :for "user" (text "~(vocab :username s/lang)"))
        (div
          :col [:xs 3]
          (bs/input
            :id "user"
            :type "text"
            :autofocus "autofocus")))

      (bs/form-group
        (bs/control-label :col [:sm 2] :for "pwd" (text "~(vocab :password s/lang)"))
        (div
          :col [:xs 3]
          (bs/input :id "pwd" :type "password")))

      (bs/form-group
        (div
          :class "col-sm-offset-2 col-xs-3"
          (button
            :class "form-control btn btn-primary"
            :type "submit" "Login"))))))