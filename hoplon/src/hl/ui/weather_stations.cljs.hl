(ns ui.weather-stations
  (:require [de.zalf.berest.client.hoplon.util :as util]
            [de.zalf.berest.client.hoplon.state :as s]
            [ui.elements :as uie]
            [ui.components :as uic]
            [bootstrap-util :as bs]
            [cljs-time.core :as cstc]
            [cljs-time.format :as cstf]
            [cljs-time.coerce :as cstcoe]
            [clojure.set :as set]))

(defn vocab
  "translatable vocabulary for this page"
  [element lang]
  (get-in {:new-local-weather-station-button {:lang/de "Neue lokale WS"
                                              :lang/en "New local ws"}
           :delete-local-weather-station-button {:lang/de "L.WS löschen"
                                        :lang/en "Delete l.ws"}
           :new-weather-station-value {:lang/de "Neue lokale Wetterstation"
                                        :lang/en "New local weather-station"}

           :weather-data-fieldset-label {:lang/de "Wetterdaten"
                                         :lang/en "Weather data"}
           #_:weather-data-label #_{:lang/de "Datensätze"
                                :lang/en "Datasets"}

           :name-label {:lang/de "Name"
                        :lang/en "Name"}
           :name-placeholder {:lang/de "Name der Wetterstation"
                              :lang/en "Name of weather station"}
           :lat-label {:lang/de "Breitengrad"
                        :lang/en "Latitude"}
           :lat-placeholder {:lang/de "Breitengrad"
                              :lang/en "Latitude"}
           :long-label {:lang/de "Längengrad"
                        :lang/en "Longitude"}
           :long-placeholder {:lang/de "Längengrad"
                              :lang/en "Longitude"}

           :th-weather-jump {:lang/de ""
                             :lang/en ""}
           :th-weather-station-name {:lang/de "Name"
                                     :lang/en "Name"}
           :th-local-weather-station? {:lang/de "Lokal?"
                                     :lang/en "Local?"}

           :show-data {:lang/de "Daten anzeigen"
                       :lang/en "Show data"}
           :edit {:lang/de "Ändern"
                  :lang/en "Edit"}
           :save-edit {:lang/de "Änderungen speichern"
                       :lang/en "Save changes"}
           :chart-year {:lang/de "Jahr"
                         :lang/en "Year"}
           :chart-header {:lang/de "Wetterdaten"
                          :lang/en "Weather data"}
           :chart-subheader {:lang/de "Quelle: DWD Station"
                             :lang/en "Source: DWD station"}
           :evap {:lang/de "Verdunstung"
                  :lang/en "Evaporation"}
           :precip {:lang/de "Niederschlag"
                    :lang/en "Precipitation"}
           :tavg {:lang/de "mittl. Temperatur"
                  :lang/en "avg. Temperature"}}
          [element (or lang :lang/de)] "UNKNOWN element"))


(defn weather-stations-pane
  []
  (let [selected-weather-station (cell= (when-let [wsid (:weather-station-id s/route-params)]
                                          (first (filter #(= (:weather-station/id %) wsid) s/user-weather-stations))))
        ;_ (cell= (println "selected-weather-station: " (pr-str selected-weather-station)))

        new-weather-station-no (cell 0)

        weather-stations-count (cell= (count s/user-weather-stations))
        many-weather-stations? (cell= (> weather-stations-count 1))
        _ (cell= (when (= weather-stations-count 1)
                   (s/set-route-params :weather-station-id (-> s/user-weather-stations first :weather-station/id))))
        ]
       (div
         :id "weather-stations-pane"
         :do-toggle (cell= (= s/route "#/weather"))

         (div
           :class "row"

           (div
             :col [:xs 12]

             (table
               :class "table"
               :toggle many-weather-stations?

               (thead
                 (tr
                   (th :style "width:5%" (text "~(vocab :th-weather-jump s/lang)"))
                   (th :style "width:55%" (text "~(vocab :th-weather-station-name s/lang)"))
                   (th :style "width:30%" (text "~(vocab :th-local-weather-station? s/lang)"))
                   (th
                     :style "width:10%; text-align:right"
                     (button
                       :class "btn btn-warning btn-sm btn-block"
                       :click #(let [temp-weather-station-name (str (vocab :new-weather-station-value @s/lang) " "
                                                                    (swap! new-weather-station-no inc))]
                                (s/create-new-local-user-weather-station temp-weather-station-name))
                       (text "~(vocab :new-local-weather-station-button s/lang)")))
                   #_(th (text "~(vocab :th-farm-state s/lang)"))))

               (tbody
                 (loop-tpl
                   :bindings [{db-id :db/id
                               id :weather-station/id
                               name :weather-station/name
                               local? :weather-station/local-user-station?
                               :as weather-station}
                              (cell= (sort-by #(if-let [n (:weather-station/name %)] n (:weather-station/id %))
                                              (:weather-stations s/state)))]
                   (let [hover? (cell false)
                         selected? (cell= (= id (:weather-station/id selected-weather-station)))]
                     (tr
                       :mouseenter #(reset! hover? true)
                       :mouseleave #(reset! hover? false)
                       (td
                         :style "text-align: center; vertical-align: middle"
                         :class (cell= {:warning (and hover? (not selected?))
                                        :success selected?})
                         :click #(do
                                  (some-> "weather-data-curves" by-id .scrollIntoView)
                                  (s/set-route-params :weather-station-id @id))
                         (span :class "glyphicon glyphicon-arrow-down"))
                       (td
                         :style "vertical-align: middle"
                         :class (cell= {:warning (and hover? (not selected?))
                                        :success selected?})
                         :click #(s/set-route-params :weather-station-id @id)
                         (text "~(or name id)"))

                       (td
                         :style "text-align: center; vertical-align: middle"
                         :class (cell= {:warning (and hover? (not selected?))
                                        :success selected?})
                         :click #(s/set-route-params :weather-station-id @id)
                         (span :class (cell= {:glyphicon (and (not (nil? local?))
                                                              local?)
                                              :glyphicon-ok (and (not (nil? local?))
                                                                 local?)})))
                       (td
                         :style "text-align:right"
                         (uic/safe-delete-button
                           :toggle (and (not (nil? local?))
                                        local?)
                           :small-button? true
                           :action! #(s/delete-db-entity @db-id)
                           :value (cell= (vocab :delete-local-weather-station-button s/lang)))))))))))

         (bs/form
           :toggle (cell= (not (nil? selected-weather-station)))
           :opts [:horizontal]
           :name "weather-station-form"

           (cell-let
             [{db-id :db/id
               id :weather-station/id
               name :weather-station/name
               local? :weather-station/local-user-station?
               years :available-years
               {lat  :geo-coord/latitude
                long :geo-coord/longitude} :weather-station/geo-coord} selected-weather-station]

             (let [[name-input lat-input long-input chart-id years-id] (repeatedly gensym)
                   edit? (cell= s/admin-logged-in?) #_(cell true)
                   no-edit? (cell= (not edit?))

                   station-data (cell {:name nil
                                       :lat  nil
                                       :long nil})

                   weather-station-data (cell nil)

                   loaded-data-ws-id (cell= (:weather-station-id weather-station-data))
                   ;_ (cell= (println "loaded-data-ws-id: " (pr-str loaded-data-ws-id)))

                   weather-data (cell= (when (= id loaded-data-ws-id)
                                             (:data weather-station-data)))
                   ;_ (cell= (println "weather-data: " (pr-str weather-station-data)))

                   available-years-set (cell= (into #{} years))
                   selected-years-set (cell nil)

                   selected-years-set* (cell= (when (seq years)
                                                    (if (seq selected-years-set)
                                                      (if-let [is (seq (set/intersection (into #{} years) selected-years-set))]
                                                              (into #{} is)
                                                              #{(first (sort years))})
                                                      (let [current-year (cstc/year (cstc/now))]
                                                           (if (available-years-set current-year)
                                                             #{current-year}
                                                             #{(first (sort years))})))))
                   ;_ (cell= (println "selected-years-set*: " (pr-str selected-years-set*)))

                   _ (cell= (when (and id selected-weather-station selected-years-set* (seq selected-years-set*))
                                  (s/load-weather-station-data ~(cell weather-station-data) id (seq selected-years-set*))))

                   chart-config {:chart {:renderTo chart-id
                                         ;:defaultSeriesType "spline"
                                         :zoomType "x"
                                         #_:spacingTop #_50}
                                 :title {:text "" #_(vocab :chart-header @s/lang)
                                         :x 0 #_-20}
                                 #_:subtitle #_{:text (str (vocab :chart-subheader @s/lang) " " @name)
                                       :x 0 #_-20
                                       :y -20}
                                 :xAxis {:type   "datetime"
                                         :labels {:format   "{value: %d.%m.%Y}"
                                                  :rotation 45
                                                  :align    "left"}}
                                 :yAxis       [{:title {:text (str (vocab :tavg @s/lang) " [°C]")}}
                                               {:title    {:text (str (vocab :precip @s/lang) "/"
                                                                      (vocab :evap @s/lang) " [mm]")}
                                                :opposite true}]
                                 :tooltip     {:shared     true
                                               :crosshairs true}
                                 :legend      {:layout        "horizontal" #_"vertical"
                                               :align         "center" #_"right"
                                               :verticalAlign "top" #_"middle"
                                               :borderWidth   0}
                                 :plotOptions {:series {:marker {:enabled false}}}
                                 :series      [{:type    "line"
                                                :name    (vocab :tavg @s/lang)
                                                :yAxis   0
                                                :tooltip {:valueSuffix " °C"}
                                                :color   "#FF0000"
                                                :data    []}
                                               {:type    "column"
                                                :name    (vocab :precip @s/lang)
                                                :yAxis   1
                                                :tooltip {:valueSuffix " mm"}
                                                :color   "#0000FF"
                                                :data    []}
                                               {:type    "column"
                                                :name    (vocab :evap @s/lang)
                                                :yAxis   1
                                                :tooltip {:valueSuffix " mm"}
                                                :color   "#FF6600"
                                                :data    []}

                                               #_{:type "line"
                                                :name (str (vocab :tavg @s/lang) " ???")
                                                :yAxis 0
                                                :tooltip {:valueSuffix " °C"}
                                                :color "#FF8080"
                                                :data []
                                                :visible false}
                                               #_{:type "column"
                                                :name (str (vocab :precip @s/lang) " ???")
                                                :yAxis 1
                                                :tooltip {:valueSuffix " mm"}
                                                :color "#8080FF"
                                                :data []
                                                :visible false}
                                               #_{:type "column"
                                                :name (str (vocab :evap @s/lang) " ???")
                                                :yAxis 1
                                                :tooltip {:valueSuffix " mm"}
                                                :color "#FFB280"
                                                :data []
                                                :visible false}
                                               ]}
                   _ (with-timeout 0 (js/Highcharts.Chart. (clj->js chart-config)))

                   #_prognosis?-or-measured-data
                   measured-data
                   (cell= (->> weather-data
                               (map second,,,)
                               (apply concat,,,)
                               #_(group-by :weather-data/prognosis-date ,,,)))
                   ;measured-data (cell= (prognosis?-or-measured-data false))
                   ;prognosis-data (cell= (prognosis?-or-measured-data true))

                   ;_ (cell= (println "measured-data: " (pr-str measured-data)))

                   #_prognosis-data #_(cell= (->> selected-data
                                         (filter #(:weather-data/prognosis-data? (second %)) ,,,)
                                         (map second ,,,)
                                         flatten))

                   set-series-data (fn [series-index data]
                                       (some-> chart-id
                                               by-id
                                               js/jQuery
                                               .highcharts
                                               .-series
                                               (#(nth % series-index),,,)
                                               (.setData (clj->js data))))

                   create-ordered-curve-data (fn [data key & {:keys [f] :or {f identity}}]
                                                 (->> data
                                                      (mapv (fn [{date :weather-data/date
                                                                  t    key}]
                                                                [(.getTime date) (f t #_(get d key))]),,,)
                                                      (sort-by first,,,)))

                   _ (cell= (set-series-data 0 (create-ordered-curve-data measured-data :weather-data/average-temperature)))
                   _ (cell= (set-series-data 1 (create-ordered-curve-data measured-data :weather-data/precipitation)))
                   _ (cell= (set-series-data 2 (create-ordered-curve-data measured-data :weather-data/evaporation :f -)))

                   ;_ (cell= (set-series-data 3 (create-ordered-curve-data prognosis-data :weather-data/average-temperature)))
                   ;_ (cell= (set-series-data 4 (create-ordered-curve-data prognosis-data :weather-data/precipitation)))
                   ;_ (cell= (set-series-data 5 (create-ordered-curve-data prognosis-data :weather-data/evaporation :f -)))

                   ]

                  [(bs/form-group
                     (bs/control-label :col [:sm 2] :for name-input (text "~(vocab :name-label s/lang)"))
                     (div
                       :col [:xs 3]
                       (p :toggle no-edit? :class "form-control-static" (text "~(or name id)"))
                       (input
                         :id name-input
                         :toggle edit?
                         :class "form-control"
                         :type "text"
                         :placeholder (cell= (vocab :name-placeholder s/lang))
                         :value (cell= (or name (str "(Id: " id ")")))
                         :on-change #(s/update-db-entity @db-id :weather-station/name (val-id name-input)))))

                   #_(bs/form-group
                     (bs/control-label :col [:sm 2] :for lat-input (text "~(vocab :lat-label s/lang)"))
                     (div
                       :col [:xs 3]
                       (p :toggle no-edit? :class "form-control-static" (text "~{lat}"))
                       (input
                         :id lat-input
                         :toggle edit?
                         :class "form-control"
                         :type "number"
                         :placeholder (cell= (vocab :lat-placeholder s/lang))
                         :value lat
                         :on-change #(swap! station-data assoc :lat (val-id lat-input)))))

                   #_(bs/form-group
                     (bs/control-label :col [:sm 2] :for long-input (text "~(vocab :long-label s/lang)"))
                     (div
                       :col [:xs 3]
                       (p :toggle no-edit? :class "form-control-static" (text "~{long}"))
                       (input
                         :id long-input
                         :toggle edit?
                         :class "form-control"
                         :type "number"
                         :placeholder (cell= (vocab :long-placeholder s/lang))
                         :value long
                         :on-change #(swap! station-data assoc :long (val-id long-input)))))


                   (bs/form-group
                     :id "weather-data-curves"
                     :toggle (cell= (not (nil? (seq selected-years-set*))))

                     (bs/control-label :col [:xs 2] :for years-id (text "~(vocab :chart-year s/lang)"))
                     (div
                       :col [:xs 3]
                       (select
                         :id years-id
                         :class "form-control"
                         :multiple "multiple"
                         ;:on-change #(s/load-weather-station-data weather-station-data @id (map js/parseInt (val-id years-id)))
                         :click #(let [sel-years (map js/parseInt (val-id years-id))]
                                      (reset! selected-years-set (into #{} sel-years))
                                      #_(s/load-weather-station-data weather-station-data @id sel-years))
                         (loop-tpl
                           :bindings [year (cell= (sort years))]
                           (option :value year
                                   :selected (cell= (if selected-years-set*
                                                      (= (selected-years-set* year) year)
                                                      false))
                                   (text "~{year}"))))))

                   (div
                     :id chart-id
                     :toggle :toggle (cell= (not (nil? (seq selected-years-set*))))
                     :col [:xs 12])

                   (let [visible? (cell false)]
                        (fieldset
                          :toggle (cell= (and selected-weather-station many-weather-stations? local?))

                          (uic/hover-activate-wrapper
                            :action! #(swap! visible? not)
                            (legend
                              (text "~(vocab :weather-data-fieldset-label s/lang) ~(when-not visible? \" ...\")")))

                          (uie/weather-data-form-group
                            :visible? visible?
                            :weather-data (cell= (when (and local? (seq selected-years-set*))
                                                       (apply concat (map second weather-data))))
                            :id-attr :weather-station/id
                            :id id)))]))))))