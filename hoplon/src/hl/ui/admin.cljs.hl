(ns ui.admin
  (:require [clojure.string :as cs]
            [de.zalf.berest.client.hoplon.util :as util]
            [de.zalf.berest.client.hoplon.state :as s]
            [ui.user :as user]
            [ui.elements :as uie]
            [bootstrap-util :as bs]
            #_[cljs-time.coerce :as cstcoe]))


(defn vocab
  "translatable vocabulary for this page"
  [element lang]
  (get-in {:new-user-filter-value {:lang/de "Neuer Nutzername"
                                   :lang/en "New user name"}

           :new-user-button {:lang/de "Neuer Nutzer"
                             :lang/en "New user"}

           :new-user-id-field-label {:lang/de "Nutzer-Id"
                                     :lang/en "User id"}
           :new-user-id-field-placeholder {:lang/de "Nutzer-Id"
                                           :lang/en "User id"}

           :new-user-pwd-field-label {:lang/de "Passwort"
                                      :lang/en "Password"}
           :new-user-pwd-field-placeholder {:lang/de "Passwort"
                                            :lang/en "Password"}


           :delete-user-button {:lang/de "Nutzer löschen"
                                :lang/en "Delete user"}

           :new-user-header {:lang/de "Neuen Nutzer anlegen"
                             :lang/en "Create new user"}

           :user-query-label {:lang/de "Nutzer-Suche"
                              :lang/en "User-search"}
           :user-query-placeholder {:lang/de "Achtung LEERE SUCHE!!"
                                    :lang/en "Attention EMPTY SEARCH!!"}

           :no-user-name-label {:lang/de "??? Nutzer ohne Name ???"
                                :lang/en "??? User without name ???"}

           :full-name-label {:lang/de "Voller Name"
                             :lang/en "Full name"}
           :full-name-placeholder {:lang/de "Voller Name des Nutzers"
                                   :lang/en "Full Name of user"}

           :show-data {:lang/de "Daten anzeigen"
                       :lang/en "Show data"}

           :show-user-details {:lang/de "Nutzer-Details anzeigen"
                               :lang/en "Show detailed user data"}


           :edit {:lang/de "Ändern"
                  :lang/en "Edit"}
           :save-edit {:lang/de "Änderungen speichern"
                       :lang/en "Save changes"}
           :chart-header {:lang/de "Wetterdaten"
                          :lang/en "Weather data"}
           :chart-subheader {:lang/de "Quelle: DWD Station"
                             :lang/en "Source: DWD station"}

           }
          [element (or lang :lang/de)] "UNKNOWN element"))


(defn admin-pane
  []
  (let [filter-criterium (cell "")
        fc-count (cell= (count filter-criterium))
        lc-filter-criterium (cell= (.toLowerCase filter-criterium))
        fc-first-char (cell= (.charAt lc-filter-criterium 0))
        filtered-users (cell= (if (> fc-count 0)
                                (filter (fn [{name :user/full-name}]
                                            (let [lc-name (.toLowerCase name)]
                                                 (if (> fc-count 1)
                                                   (> (.search lc-name lc-filter-criterium) -1)
                                                   (= (.charAt lc-name 0) fc-first-char))))
                                        (:users s/state))
                                (:users s/state)))

         edit-new-user? (cell false)
         no-edit-new-user? (cell= (not edit-new-user?))

         name (cell nil)
         notes (cell nil)

         new-user-id (cell "")
         new-user-pwd (cell "")

         [users-id
          new-user-id-field-id
          new-user-pwd-field-id
          user-query-id] (repeatedly gensym)

         ]

    (div
      :id "admin-pane"
      :do-toggle (cell= (= s/route "#/admin"))

      (div
        :id users-id

        (bs/form
          :opts [:horizontal]

          (bs/form-group
            (div
              :class "col-xs-offset-1 form-control-static"
              :col [:xs 11]
              (for [c (range 65 91)]
                   (button
                     :type "button"
                     :class "btn btn-link"
                     :on-click #(reset! filter-criterium (char c))
                     (char c)))))

          (bs/form-group
            (bs/control-label :col [:xs 1] :for user-query-id (text "~(vocab :user-query-label s/lang)"))
            (div
              :col [:xs 11]
              (input
                :id user-query-id
                :class "form-control"
                :type "text"
                :placeholder (cell= (vocab :user-query-placeholder s/lang))
                :value filter-criterium
                :on-change #(reset! filter-criterium @% #_(val-id user-query-id))))))

        (hr)

        (div
          (bs/form
            :opts [:inline]

            (bs/form-group
              (label :class "sr-only" :for new-user-id-field-id (text "~(vocab :new-user-id-field-label s/lang)"))
              (input
                :id new-user-id-field-id
                :class "form-control"
                :type "text"
                :placeholder (cell= (vocab :new-user-id-field-placeholder s/lang))
                :value new-user-id
                :on-change #(reset! new-user-id @%)))

            (bs/form-group
              (label :class "sr-only" :for new-user-pwd-field-id (text "~(vocab :new-user-pwd-field-label s/lang)"))
              (input
                :id new-user-pwd-field-id
                :class "form-control"
                :type "text"
                :placeholder (cell= (vocab :new-user-pwd-field-placeholder s/lang))
                :value new-user-pwd
                :on-change #(reset! new-user-pwd @%)))

            (button
              ;:toggle no-edit?
              ;:style "float:right"
              :class "btn btn-warning"
              :click #(let [uid (cs/trim @new-user-id)
                            pwd (cs/trim @new-user-pwd)]
                           (when (and (seq uid) (seq pwd))
                                 (s/create-new-user uid pwd)
                                 (reset! filter-criterium uid)
                                 (reset! new-user-id "")
                                 (reset! new-user-pwd "")))
              (text "~(vocab :new-user-button s/lang)"))))

        (hr)

        (div
          (loop-tpl
            :bindings [{user-db-id :db/id
                        user-id :user/id
                        full-name :user/full-name
                        roles :user/roles
                        user-farms :user/farms
                        user-weather-stations :user/weather-stations
                        :as user} (cell= (sort-by :user/name filtered-users))]
            ;:bind-ids [farm-id]
            (let [user-details-visible? (cell false)
                  user-hover? (cell false)
                  user-hover?2 (cell false)]
                 (div
                   :mouseenter #(reset! user-hover? true)
                   :mouseleave #(reset! user-hover? false)
                   ;:hover #(swap! farm-hover? not)
                   ;:class (cell= {:bg-info user-hover?})

                   (h3
                     ;:hover #(swap! user-hover?2 not)
                     #_:click #_#(do
                              (reset! user-hover? false)
                              (reset! user-details-visible? true))
                     (text "~(if full-name full-name (vocab :no-user-name-label s/lang))")
                     (div
                       (button
                         :toggle user-hover?
                         :style "float:right"
                         :class "btn btn-danger"
                         :click #(do (println "delete farm id: " @user-id " name: " @full-name)
                                     (s/delete-db-entity @user-db-id))
                         (text "~(vocab :delete-user-button s/lang)"))
                       ))

                   (span
                     :class "glyphicon glyphicon-plus"
                     :toggle (cell= (not user-details-visible?))
                     :on-click #(reset! user-details-visible? true))
                   (span
                     :toggle user-details-visible?
                     :class "glyphicon glyphicon-minus"
                     :click #(reset! user-details-visible? false))
                   (span (text " ~(vocab :show-user-details s/lang)"))

                   (user/user
                     :toggle user-details-visible?
                     :fields {:id user-id

                              :full-name full-name :full-name! #(s/update-db-entity @user-db-id :user/full-name %)

                              :roles roles

                              :weather-stations user-weather-stations

                              :farms user-farms}
                     :opts {:edit? true
                            :label-cols 2
                            :value-cols 3})
                   )))

          )


        )

      #_(bs/form
        :opts [:horizontal]




        (bs/form-group
          (div
            :class "col-xs-offset-1 form-control-static"
            :col [:xs 11]
            (for [c (range 65 91)]
              (button
                :type "button"
                :class "btn btn-link"
                :on-click #(reset! filter-criterium {:attr :farm/name
                                                     :value (char c)})
                (char c)))))

        (bs/form-group
          (bs/control-label :col [:xs 1] :for query-id (text "~(vocab :query-label s/lang)"))
          (div
            :col [:xs 11]
            (input
              :id query-id
              :class "form-control"
              :type "text"
              :placeholder (cell= (vocab :query-placeholder s/lang))
              :value (cell= (:value filter-criterium))
              :on-change #(reset! filter-criterium {:attr :farm/name
                                                    :value (val-id query-id)})))))


      #_(div
        (loop-tpl
          :bindings [[_ {farm-db-id :db/id
                         farm-id :farm/id
                         farm-name :farm/name
                         addresses :farm/addresses
                         farm-notes :farm/notes
                         authorative-weather-station :farm/authorative-weather-station
                         weather-station :farm/weather-station
                         weather-data :farm/weather-data
                         :as farm}] (cell= (sort-by #(-> % second :farm/name) filtered-farms))]
          ;:bind-ids [farm-id]
          (let [farm-details-visible? (cell false)
                farm-hover? (cell false)]
            (div
              :mouseenter #(reset! farm-hover? true)
              :mouseleave #(reset! farm-hover? false)
              ;:hover #(swap! farm-hover? not)
              (h3
                (text "~(if farm-name farm-name (vocab :no-farm-name-label s/lang))")
                (div
                  (button
                    :toggle farm-hover?
                    :style "float:right"
                    :class "btn btn-danger"
                    :click #(do (println "delete farm id: " @farm-id " name: " @farm-name)
                                (s/delete-db-entity @farm-db-id))
                    (text "~(vocab :delete-farm-button s/lang)"))

                  (button
                    :toggle farm-hover?
                    :style "float:right"
                    :class "btn btn-warning"
                    :click #(s/create-new-plot @farm-id)
                    (text "~(vocab :new-plot-button s/lang)"))
                  ))

              (span
                :class "glyphicon glyphicon-plus"
                :toggle (cell= (not farm-details-visible?))
                :on-click #(reset! farm-details-visible? true))
              (span
                :toggle farm-details-visible?
                :class "glyphicon glyphicon-minus"
                :click #(reset! farm-details-visible? false))
              (span (text " ~(vocab :show-farm-details s/lang)"))

              (farm/farm
                :toggle farm-details-visible?
                :fields {:id farm-id
                         :name farm-name :name! #(s/update-db-entity @farm-db-id :farm/name %)
                         :addresses addresses
                         :notes farm-notes :notes! #(s/update-db-entity @farm-db-id :farm/notes %)

                         :authorative-weather-station authorative-weather-station
                         :authorative-weather-station! #(s/update-db-entity @farm-db-id :farm/authorative-weather-station %)

                         :weather-station weather-station
                         :weather-station! #(s/update-db-entity @farm-db-id :farm/weather-station %)

                         :weather-data weather-data}
                :opts {:edit? true
                       :label-cols 2
                       :value-cols 3})

              (hr)

              (div
                (loop-tpl
                  :bindings [[_ {db-id :db/id
                                 id :plot/id
                                 name :plot/name
                                 number :plot/number
                                 description :plot/description
                                 short-description :plot/short-description
                                 crop-area :plot/crop-area
                                 irrigation-area :plot/irrigation-area
                                 stt :plot/stt
                                 slope :plot/slope
                                 field-capacities :plot/field-capacities
                                 fc-pwp-unit :plot/fc-pwp-unit
                                 permanent-wilting-points :plot/permanent-wilting-points
                                 pwp-unit :plot/pwp-unit
                                 ka5-soil-types :plot/ka5-soil-types
                                 groundwaterlevel :plot/groundwaterlevel
                                 annuals :plot/annuals
                                 weather-station :plot/weather-station
                                 weather-data :plot/weather-data
                                 location-coords :plot/location-coords
                                 notes :plot/notes
                                 az-glz :plot/az-glz
                                 nft :plot/nft
                                 bse :plot/bse
                                 sse :plot/sse
                                 bwb :plot/bwb
                                 irrigation-well :plot/irrigation-well}]
                             (cell= (sort-by :plot/name (:plots farm)))]
                  :bind-ids [annual-years-id]
                  (let [plot-details-visible? (cell false)
                        plot-annual-details-visible? (cell false)
                        plot-hover? (cell false)]
                    (div
                      :hover #(swap! plot-hover? not)
                      (h4
                        (text "~(if name name (vocab :no-plot-name-label s/lang))")
                        (button
                          :toggle plot-hover?
                          :style "float:right"
                          :class "btn btn-danger"
                          :click #(s/delete-db-entity @db-id)
                          (text "~(vocab :delete-plot-button s/lang)")))

                      (span
                        :class "glyphicon glyphicon-plus"
                        :toggle (cell= (not plot-details-visible?))
                        :on-click #(reset! plot-details-visible? true))
                      (span
                        :toggle plot-details-visible?
                        :class "glyphicon glyphicon-minus"
                        :click #(reset! plot-details-visible? false))
                      (span (text " ~(vocab :show-plot-details s/lang)"))

                      (plot/plot
                        :toggle plot-details-visible?
                        :fields {:id id
                                 :name name :name! #(s/update-db-entity @db-id :plot/name %)
                                 :number number :number! #(s/update-db-entity @db-id :plot/number %)
                                 :description description :description! #(s/update-db-entity @db-id :plot/description %)

                                 :short-description short-description
                                 :short-description! #(s/update-db-entity @db-id :plot/short-description %)

                                 :crop-area crop-area :crop-area! #(s/update-db-entity @db-id :plot/crop-area %)

                                 :irrigation-area irrigation-area
                                 :irrigation-area! #(s/update-db-entity @db-id :plot/irrigation-area %)

                                 :stt stt :stt! #(s/update-db-entity @db-id :plot/stt [:soil.stt/key %])
                                 :slope slope :slope! #(s/update-db-entity @db-id :plot/slope [:slope/key %])

                                 :field-capacities field-capacities
                                 ;:field-capacities! #(s/update-db-entity @db-id :plot/field-capacities %)

                                 :fc-pwp-unit fc-pwp-unit :fc-pwp-unit! #(s/update-db-entity @db-id :plot/fc-pwp-unit %)

                                 :permanent-wilting-points permanent-wilting-points
                                 ;:permanent-wilting-points! #(s/update-db-entity @db-id :plot/permanent-wilting-points %)

                                 :pwp-unit pwp-unit :pwp-unit! #(s/update-db-entity @db-id :plot/pwp-unit %)

                                 :ka5-soil-types ka5-soil-types
                                 :ka5-soil-types! #(s/update-db-entity @db-id :plot/ka5-soil-types %)

                                 :groundwaterlevel groundwaterlevel
                                 :groundwaterlevel! #(s/update-db-entity @db-id :plot/groundwaterlevel %)

                                 :annuals annuals

                                 :weather-station weather-station
                                 :weather-station! #(s/update-db-entity @db-id :plot/weather-station %)

                                 :weather-data weather-data

                                 :location-coords location-coords
                                 :location-coords! #(s/update-db-entity @db-id :plot/location-coords %)

                                 :notes notes :notes! #(s/update-db-entity @db-id :plot/notes %)

                                 :az-glz az-glz :az-glz! #(s/update-db-entity @db-id :plot/az-glz %)
                                 :nft nft :nft! #(s/update-db-entity @db-id :plot/nft %)
                                 :bse bse :bse! #(s/update-db-entity @db-id :plot/bse %)
                                 :sse sse :sse! #(s/update-db-entity @db-id :plot/sse %)
                                 :bwb bwb :bwb! #(s/update-db-entity @db-id :plot/bwb %)

                                 ;:irrigation-well irrigation-well
                                 ;irrigation-well! #(s/update-db-entity @db-id :plot/irrigation-well %)
                                 }
                        :opts {:edit? true
                               :label-cols 2
                               :value-cols 3})


                      (let [annual-years (cell= (->> annuals
                                                     (map :plot.annual/year ,,,)
                                                     sort))

                            current-year (.getFullYear (js/Date.))

                            selected-annual-year* (cell nil)

                            selected-annual-year (cell= (or selected-annual-year*
                                                            ((into #{} annual-years) current-year)
                                                            (last annual-years)))

                            selected-annual (cell= (first (filter #(= selected-annual-year (:plot.annual/year %)) annuals)))]

                        (div

                          (div
                            :class "row"

                            (div
                              :col [:xs 3]
                              (span
                                :class "glyphicon glyphicon-plus"
                                :toggle (cell= (not plot-annual-details-visible?))
                                :on-click #(reset! plot-annual-details-visible? true))
                              (span
                                :toggle plot-annual-details-visible?
                                :class "glyphicon glyphicon-minus"
                                :click #(reset! plot-annual-details-visible? false))
                              (span (text " ~(vocab :show-plot-annual-details s/lang)")))

                            (div
                              :col [:xs 4]
                              (bs/form
                                :opts [:horizontal]

                                (bs/control-label :col [:sm 4] :for annual-years-id (text "~(vocab :annual-years-label s/lang)"))
                                (div
                                  :col [:xs 8]
                                  (select
                                  :id annual-years-id
                                  :class "form-control"
                                  :on-change #(reset! selected-annual-year* (js/parseInt (val-id annual-years-id)))
                                  (loop-tpl
                                    :bindings [year annual-years]
                                    (option :value year
                                            :selected (cell= (= year selected-annual-year))
                                            (text "~{year}"))))))))

                          (cell-let
                            [{db-id :db/id
                              year :plot.annual/year
                              abs-day-of-initial-soil-moisture-measurement :plot.annual/abs-day-of-initial-soil-moisture-measurement
                              initial-soil-moistures :plot.annual/initial-soil-moistures
                              initial-sm-unit :plot.annual/initial-sm-unit
                              technology :plot.annual/technology
                              crop-instances :plot.annual/crop-instances
                              donations :plot.annual/donations
                              } selected-annual]

                            (plot-annual/plot-annual
                              :style "margin-top: 20px"
                              :toggle plot-annual-details-visible?
                              :fields {:plot-id id

                                       :db-id db-id

                                       :year year :year! #(s/update-db-entity @db-id :plot.annual/year %)

                                       :abs-day-of-initial-soil-moisture-measurement abs-day-of-initial-soil-moisture-measurement
                                       :abs-day-of-initial-soil-moisture-measurement! #(s/update-db-entity @db-id :plot.annual/abs-day-of-initial-soil-moisture-measurement %)

                                       :initial-soil-moistures initial-soil-moistures

                                       :initial-sm-unit initial-sm-unit
                                       :initial-sm-unit! #(s/update-db-entity @db-id :plot.annual/initial-sm-unit %)

                                       :technology technology

                                       :crop-instances crop-instances

                                       :donations donations}
                              :opts {:edit? true
                                     :label-cols 2
                                     :value-cols 3}))))

                      (hr)))))

              ))))



      )))