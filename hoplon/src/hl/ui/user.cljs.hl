(ns ui.user
  (:require #_[tailrecursion.hoplon :as hop]
            [de.zalf.berest.client.hoplon.util :as util]
            [ui.elements :as uie]
            [bootstrap-util :as bs]
            [de.zalf.berest.client.hoplon.state :as s]))

(defn vocab
  "translatable vocabulary for this page"
  [element lang]
  (get-in {:full-name-label {:lang/de "Voller Name"
                             :lang/en "Full name"}
           :full-name-placeholder {:lang/de "Name des Nutzers"
                                   :lang/en "Name of user"}

           :pwd-label {:lang/de "Passwort"
                       :lang/en "Password"}
           :pwd1-placeholder {:lang/de "Neues Passwort eingeben"
                             :lang/en "Enter new password"}
           :pwd2-placeholder {:lang/de "Neues Passwort wiederholen"
                              :lang/en "Repeat new password"}
           :pwd-updated-successfully {:lang/de "Passwort wurde erfolgreich geändert"
                                      :lang/en "Password has been changed successfully"}

           :roles-label {:lang/de "Rollen"
                         :lang/en "Roles"}
           :admin-role {:lang/de "Administrator"
                         :lang/en "Administrator"}
           :consultant-role {:lang/de "Berater"
                             :lang/en "Consultant"}
           :farmer-role {:lang/de "Landwirt"
                         :lang/en "Farmer"}
           :guest-role {:lang/de "Gast"
                         :lang/en "Guest"}

           :short-description-label {:lang/de "Kurz-Beschreibung"
                                     :lang/en "Short-description"}
           :short-description-placeholder {:lang/de "Kurzbeschreibung des Schlages"
                                           :lang/en "Short description of plot"}

           :crop-area-label {:lang/de "Anbaufläche"
                             :lang/en "Cropping area"}
           :crop-area-placeholder {:lang/de "Fläche des Schlages"
                                   :lang/en "Cropping area of plot"}

           :groundwaterlevel-label {:lang/de "Grundwasserstand"
                                    :lang/en "Groundwaterlevel"}
           :groundwaterlevel-placeholder {:lang/de "Niveau des Grundwasserstandes"
                                          :lang/en "Groundwaterlevel"}

           :irrigation-area-label {:lang/de "Beregnete Fläche"
                                   :lang/en "Irrigated area"}
           :irrigation-area-placeholder {:lang/de "Fläche unter Beregnung"
                                         :lang/en "Area under irrigation"}

           :stt-label {:lang/de "Standorttyp (MMK STT)"
                       :lang/en "MMK STT"}

           :slope-label {:lang/de "Hangneigung (MMK NFT)"
                         :lang/en "Slope (MMK NFT)"}

           :field-capacities-label {:lang/de "Feldkapazitäten"
                                    :lang/en "Field capacities"}

           :permanent-wilting-points-label {:lang/de "Permanente Welkepunkte"
                                            :lang/en "Permanent wilting points"}

           :ka5-soil-types-label {:lang/de "KA5 Bodentypen"
                                  :lang/en "KA5 soil types"}

           :substrate-groups-label {:lang/de "Substratgruppen für"
                                    :lang/en "Substrate groups for"}

           :soil-data-fieldset-label {:lang/de "Bodendaten/Bodenschichtungsdaten"
                                      :lang/en "Soil data/soil layer data"}

           :fc-pwp-data-fieldset-label {:lang/de "Feldkapazitäten/Permanente Welkepunkte"
                                      :lang/en "Field capacities/permenent wilting points"}

           :fc-pwp-unit-label {:lang/de "FK/PWP Einheit"
                               :lang/en "FC/PWP unit"}

           :pFK {:lang/de "% FK"
                 :lang/en "% FC"}

           :pNFK {:lang/de "% NFK"
                 :lang/en "% NFC"}

           :volP {:lang/de "Vol.%"
                 :lang/en "vol.%"}

           :mm {:lang/de "mm"
                :lang/en "mm"}


           :weather-data-fieldset-label {:lang/de "Wetterdaten"
                                         :lang/en "Weather data"}

           :weather-station-label {:lang/de "lokale Wetterstation"
                                   :lang/en "Local weather station"}

           :weather-data-label {:lang/de "Manuelle Wetterdaten"
                                :lang/en "Manual weather data"}

           :notes-label {:lang/de "Notizen"
                         :lang/en "Notes"}
           :notes-placeholder {:lang/de "Hier können Notizen zum Schlag gemacht werden ..."
                               :lang/en "Here you can keep notes regarding the plot ..."}

           :show-data {:lang/de "Daten anzeigen"
                       :lang/en "Show data"}

           :edit-user-button-label {:lang/de "Ändern"
                                    :lang/en "Edit"}

           :add-layer-label {:lang/de "Schicht hinzufügen"
                             :lang/en "Add layer"}
           :remove-layer-label {:lang/de "Schicht entfernen"
                                :lang/en "Remove layer"}
           :depth-placeholder {:lang/de "Tiefe [cm]"
                               :lang/en "Depth [cm]"}
           :value-placeholder {:lang/de "Wert"
                               :lang/en "Value"}


           :chart-header {:lang/de "Wetterdaten"
                          :lang/en "Weather data"}
           :chart-subheader {:lang/de "Quelle: DWD Station"
                             :lang/en "Source: DWD station"}

           :dc {:lang/de "BEREST DC Code"
                :lang/en "BEREST DC code"}

           :cover-degree {:lang/de "Bedeckungsgrad"
                          :lang/en "Cover degree"}

           :extraction-depth {:lang/de "Entzugstiefe"
                              :lang/en "Extraction depth"}

           :aet-pet {:lang/de "Quotient AET/PET"
                     :lang/en "Quotient AET/PET"}

           :transpiration-factor {:lang/de "Transpirations-Faktor"
                                  :lang/en "Transpiration factor"}
           }
          [element (or lang :lang/de)] "UNKNOWN element"))



(defelem
  user
  [{{:keys [id
            full-name full-name!
            roles
            weather-stations
            farms]} :fields
    {:keys [edit? label-cols value-cols]} :opts
    :as attrs}
   kids]
  (let [edit? (cell (if (cell? edit?) @edit? edit?))
        no-edit? (cell= (not edit?))
        [user-form-name
         name-id
         full-name-id
         pwd-id
         pwd2-id
         roles-id
         weather-stations-id
         farms-id] (repeatedly gensym)
        ;selected-stt-substrate-group-keys (cell= (:soil.stt/substrate-groups stt))

        pwds (cell ["" ""])
        pwd-error (cell false)
        _ (cell= (if (not-any? empty? pwds)
                   (if (apply = pwds)
                     (do
                       (reset! ~(cell pwd-error) false)
                       (s/set-new-password id (first pwds)))
                     (reset! ~(cell pwd-error) true))))
        _ (cell= (when s/pwd-update-success?
                       (reset! ~(cell pwds) ["" ""])
                       (timeout #(reset! ~(cell s/pwd-update-success?) nil) 5000)))
        ]
    ((div
       (bs/form
         :opts [:horizontal]
         :name user-form-name

         (button
           :style "float:right"
           :class "btn btn-info"
           :click #(swap! edit? not)
           (text "~(vocab :edit-user-button-label s/lang)"))


         (bs/form-group
           (bs/control-label :col [:sm label-cols] :for full-name-id (text "~(vocab :full-name-label s/lang)"))
           (div
             :col [:xs value-cols]
             (p :toggle no-edit? :class "form-control-static" (text "~{full-name}"))
             (input
               :id full-name-id
               :toggle edit?
               :class "form-control"
               :type "text"
               :placeholder (cell= (vocab :full-name-placeholder s/lang))
               :value full-name
               :on-change #(full-name! @% #_(val-id name-id)))))

         (bs/form-group
           :class (cell= {:has-error pwd-error})
           (bs/control-label :col [:sm label-cols] :for pwd-id (text "~(vocab :pwd-label s/lang)"))
           (div
             :col [:xs value-cols]
             (p
               :toggle s/pwd-update-success?
               :class (cell= {:bg-success s/pwd-update-success?
                              :form-control-static true})
               (text "~(vocab :pwd-updated-successfully s/lang)"))

             (input
               :id pwd-id
               :toggle (cell= (and edit? (not s/pwd-update-success?)))
               :class "form-control"
               :type "password"
               :placeholder (cell= (vocab :pwd1-placeholder s/lang))
               :value (cell= (first pwds))
               :on-change #(swap! pwds assoc 0 @%))

             (input
               :id pwd2-id
               :toggle (cell= (and edit? (not s/pwd-update-success?)))
               :class "form-control"
               :type "password"
               :placeholder (cell= (vocab :pwd2-placeholder s/lang))
               :value (cell= (second pwds))
               :on-change #(swap! pwds assoc 1 @%))))

         (bs/form-group
           (bs/control-label :col [:sm 2] :for roles-id (text "~(vocab :roles-label s/lang)"))
           (div
             :col [:xs 3]
             (select
               :id roles-id
               :class "form-control"
               :multiple "multiple"
               :size 4
               :on-change #(#_(map type @%))

               (option
                 :value "user.role/admin"
                 :selected (cell= (-> (roles :user.role/admin) nil? not))
                 (text "~(vocab :admin-role s/lang)"))
               (option
                 :value "user.role/consultant"
                 :selected (cell= (-> (roles :user.role/consultant) nil? not))
                 (text "~(vocab :consultant-role s/lang)"))
               (option
                 :value "user.role/farmer"
                 :selected (cell= (-> (roles :user.role/farmer) nil? not))
                 (text "~(vocab :farmer-role s/lang)"))
               (option
                 :value "user.role/guest"
                 :selected (cell= (-> (roles :user.role/guest) nil? not))
                 (text "~(vocab :guest-role s/lang)")))))


         #_(bs/form-group
           (bs/control-label :col [:sm label-cols] :for number-id (text "~(vocab :number-label s/lang)"))
           (div
             :col [:xs value-cols]
             (p :toggle no-edit? :class "form-control-static" (text "~{number}"))
             (input
               :id number-id
               :toggle edit?
               :class "form-control"
               :type "text"
               :placeholder (cell= (vocab :number-placeholder s/lang))
               :value number
               :on-change #(number! (val-id number-id)))))

         #_(bs/form-group
           (bs/control-label :col [:sm label-cols] :for description-id (text "~(vocab :description-label s/lang)"))
           (div
             :col [:xs value-cols]
             (p :toggle no-edit? :class "form-control-static" (text "~{description}"))
             (input
               :id description-id
               :toggle edit?
               :class "form-control"
               :type "text"
               :placeholder (cell= (vocab :description-placeholder s/lang))
               :value description
               :on-change #(description! (val-id description-id)))))

         #_(bs/form-group
           (bs/control-label :col [:sm label-cols] :for short-description-id (text "~(vocab :short-description-label s/lang)"))
           (div
             :col [:xs value-cols]
             (p :toggle no-edit? :class "form-control-static" (text "~{short-description}"))
             (input
               :id short-description-id
               :toggle edit?
               :class "form-control"
               :type "text"
               :placeholder (cell= (vocab :short-description-placeholder s/lang))
               :value short-description
               :on-change #(short-description! (val-id short-description-id)))))

         #_(bs/form-group
           (bs/control-label :col [:sm label-cols] :for crop-area-id (text "~(vocab :crop-area-label s/lang)"))
           (div
             :col [:xs value-cols]
             (p :toggle no-edit? :class "form-control-static" (text "~{crop-area}"))
             (div
               :class "input-group"
               (input
                 :id crop-area-id
                 :toggle edit?
                 :class "form-control"
                 :type "number"
                 :step 0.1
                 :min 0
                 :placeholder (cell= (vocab :crop-area-placeholder s/lang))
                 :value crop-area
                 :on-change #(crop-area! (js/parseFloat (val-id crop-area-id))))
               (span :class "input-group-addon" "ha"))))

         #_(bs/form-group
           (bs/control-label :col [:sm label-cols] :for irrigation-area-id (text "~(vocab :irrigation-area-label s/lang)"))
           (div
             :col [:xs value-cols]
             (p :toggle no-edit? :class "form-control-static" (text "~{irrigation-area}"))
             (div
               :class "input-group"
               (input
               :id irrigation-area-id
               :toggle edit?
               :class "form-control"
               :type "number"
               :step 0.1
               :min 0
               :placeholder (cell= (vocab :irrigation-area-placeholder s/lang))
               :value irrigation-area
               :on-change #(irrigation-area! (js/parseFloat (val-id irrigation-area-id))))
               (span :class "input-group-addon" "ha"))))

         #_(fieldset
           (legend (text "~(vocab :soil-data-fieldset-label s/lang)"))

           (bs/form-group
             (bs/control-label :col [:sm (+ 1 label-cols)] :for stt-id (text "~(vocab :stt-label s/lang)"))
             (div
               :col [:xs (min (+ value-cols 2) (- 12 label-cols))]
               (p :toggle no-edit? :class "form-control-static" (text "~{stt}"))
               (select
                 :toggle edit?
                 :id stt-id
                 :class "form-control"
                 :on-change #(stt! (js/parseInt (val-id stt-id)))
                 (loop-tpl
                   :bindings [{key :soil.stt/key
                               symbol :soil.stt/symbol
                               description :soil.stt/description
                               subs-groups :soil.stt/substrate-groups}
                              (cell= (sort-by :soil.stt/symbol s/stts))]
                   (option :value key
                           :selected (cell= (= key (:soil.stt/key stt)))
                           (text "~{symbol} | ~{description}"))))))

           (bs/form-group
             (bs/control-label :col [:sm (+ 1 label-cols)] :for slope-id (text "~(vocab :slope-label s/lang)"))
             (div
               :col [:xs value-cols]
               (p :toggle no-edit? :class "form-control-static" (text "~{slope}"))
               (select
                 :toggle edit?
                 :id slope-id
                 :class "form-control"
                 :on-change #(slope! (js/parseInt (val-id slope-id)))
                 (loop-tpl
                   :bindings [{key :slope/key
                               symbol :slope/symbol
                               description :slope/description}
                              (cell= (sort-by :slope/key s/slopes))]
                   (option :value key
                           :selected (cell= (= key (:slope/key slope)))
                           (text "~{symbol} | ~{description}"))))))

           (bs/form-group
             (bs/control-label :col [:sm (+ 1 label-cols)] :for ka5-soil-types-id
                               (text "~(vocab :ka5-soil-types-label s/lang)"))
             (let [depth* (cell nil)
                   ka5* (cell nil)]
               (div
                 :col [:xs (min (+ value-cols 2) (- 12 label-cols))]
                 #_(p :toggle no-edit? :class "form-control-static" (text "~{irrigation-area}"))

                 (loop-tpl
                   :bindings [[row-no {db-id :db/id
                                       ka5 :soil/ka5-soil-type
                                       depth :soil/upper-boundary-depth}]
                              (cell= (util/indexed (sort-by :soil/upper-boundary-depth ka5-soil-types)))]
                   (uie/create-ka5-inputs
                     :fields {:row-no row-no
                              :row-action! #(s/delete-db-entity @db-id)
                              :depth depth :depth! #(s/update-db-entity @db-id :soil/upper-boundary-depth %)
                              :value ka5 :value! #(s/update-db-entity @db-id :soil/ka5-soil-type %)}))
                 (uie/create-ka5-inputs
                   :fields {:row-action! #(when (and @depth* @ka5*)
                                           (s/create-new-soil-data-layer :plot/id @id @depth* :ka5 @ka5*)
                                           (reset! depth* nil)
                                           (reset! ka5* nil))
                            :depth depth* :depth! #(reset! depth* %)
                            :value ka5* :value! #(reset! ka5* %)}))))


           (fieldset
             (legend
               :style "font-size: 18px; margin-left: 5%; width:95%"
               (text "~(vocab :fc-pwp-data-fieldset-label s/lang)"))

             (bs/form-group
               :toggle edit? ;we don't have to show this for read-only mode
               (bs/control-label :col [:sm (+ 1 label-cols)] :for substrate-groups-fc-id
                                 (text "~(vocab :substrate-groups-label s/lang) ~(:soil.stt/symbol stt)"))
               (div
                 :col [:xs value-cols]
                 (select
                   :id substrate-groups-fc-id
                   :class "form-control"
                   :on-change #(s/set-substrate-group-fcs-and-pwps @id (js/parseInt (val-id substrate-groups-fc-id)))
                   (option "")
                   (loop-tpl
                     :bindings [{key :soil.substrate/key
                                 symbol :soil.substrate/symbol
                                 description :soil.substrate/description
                                 fcs :soil.substrate/field-capacities}
                                (cell= (->> selected-stt-substrate-group-keys
                                            (select-keys s/substrate-groups,,,)
                                            vals
                                            (sort-by :soil.substrate/description,,,)))]
                     (option :value key
                             ;:selected (cell= (= key (:soil.stt/key stt)))
                             (text "~{symbol} | ~{description}"))))))

             (bs/form-group
               :toggle edit? ;we don't have to show this for read-only mode
               (bs/control-label :col [:sm (+ 1 label-cols)] :for fc-pwp-unit-id
                                 (text "~(vocab :fc-pwp-unit-label s/lang)"))
               (div
                 :col [:xs 2]
                 (select
                   :disabled "disabled"
                   :id fc-pwp-unit-id
                   :class "form-control"
                   :on-change #(fc-pwp-unit! (keyword (val-id fc-pwp-unit-id)))
                   (option :value "soil-moisture.unit/pFK"
                           :selected (cell= (= fc-pwp-unit :soil-moisture.unit/pFK))
                           (text "~(vocab :pFK s/lang)"))
                   (option :value "soil-moisture.unit/pNFK"
                           :selected (cell= (= fc-pwp-unit :soil-moisture.unit/pNFK))
                           (text "~(vocab :pNFK s/lang)"))
                   (option :value "soil-moisture.unit/volP"
                           :selected (cell= (= fc-pwp-unit :soil-moisture.unit/volP))
                           (text "~(vocab :volP s/lang)"))
                   (option :value "soil-moisture.unit/mm"
                           :selected (cell= (= fc-pwp-unit :soil-moisture.unit/mm))
                           (text "~(vocab :mm s/lang)")))))

             (bs/form-group
               (bs/control-label :col [:sm (+ 1 label-cols)] :for field-capacities-id
                                 (text "~(vocab :field-capacities-label s/lang)"))
               (let [depth* (cell nil)
                     fc* (cell nil)
                     unit* (cell= (vocab (keyword ((fnil clojure.core/name "") fc-pwp-unit)) s/lang))]
                 (div
                   :col [:xs (min (+ value-cols 2) (- 12 label-cols))]
                   #_(p :toggle no-edit? :class "form-control-static" (text "~{irrigation-area}"))

                   (loop-tpl
                     :bindings [[row-no {db-id :db/id
                                         fc :soil/field-capacity
                                         depth :soil/upper-boundary-depth}]
                                (cell= (util/indexed (sort-by :soil/upper-boundary-depth field-capacities)))]
                     (uie/create-soil-data-inputs
                       :fields {:row-no row-no
                                :row-action! #(s/delete-db-entity @db-id)
                                :unit unit*
                                :depth depth :depth! #(s/update-db-entity @db-id :soil/upper-boundary-depth %)
                                :value fc :value! #(s/update-db-entity @db-id :soil/field-capacity % :value-type :double)}))
                   (uie/create-soil-data-inputs
                     :fields {:row-action! #(when (and @depth* @fc*)
                                             (s/create-new-soil-data-layer :plot/id @id @depth* :fc @fc*)
                                             (reset! depth* nil)
                                             (reset! fc* nil))
                              :unit unit*
                              :depth depth* :depth! #(reset! depth* %)
                              :value fc* :value! #(reset! fc* %)})
                   )))

             (bs/form-group
               (bs/control-label :col [:sm (+ 1 label-cols)] :for permanent-wilting-points-id
                                 (text "~(vocab :permanent-wilting-points-label s/lang)"))
               (let [depth* (cell nil)
                     pwp* (cell nil)
                     unit* (cell= (vocab (keyword ((fnil clojure.core/name "") fc-pwp-unit)) s/lang))]
                 (div
                   :col [:xs (min (+ value-cols 2) (- 12 label-cols))]
                   #_(p :toggle no-edit? :class "form-control-static" (text "~{irrigation-area}"))

                   (loop-tpl
                     :bindings [[row-no {db-id :db/id
                                         pwp :soil/permanent-wilting-point
                                         depth :soil/upper-boundary-depth}]
                                (cell= (util/indexed (sort-by :soil/upper-boundary-depth permanent-wilting-points)))]
                     (uie/create-soil-data-inputs
                       :fields {:row-no row-no
                                :row-action! #(s/delete-db-entity @db-id)
                                :unit unit*
                                :depth depth :depth! #(s/update-db-entity @db-id :soil/upper-boundary-depth %)
                                :value pwp :value! #(s/update-db-entity @db-id :soil/permanent-wilting-point %
                                                                        :value-type :double)}))
                   (uie/create-soil-data-inputs
                     :fields {:row-action! #(when (and @depth* @pwp*)
                                             (s/create-new-soil-data-layer :plot/id @id @depth* :pwp @pwp*)
                                             (reset! depth* nil)
                                             (reset! pwp* nil))
                              :unit unit*
                              :depth depth* :depth! #(reset! depth* %)
                              :value pwp* :value! #(reset! pwp* %)})
                   )))
             ))

         #_(bs/form-group
           (bs/control-label :col [:sm label-cols] :for groundwaterlevel-id (text "~(vocab :groundwaterlevel-label s/lang)"))
           (div
             :col [:xs value-cols]
             (p :toggle no-edit? :class "form-control-static" (text "~{groundwaterlevel}"))
             (div
               :class "input-group"
               (input
                 :id groundwaterlevel-id
                 :toggle edit?
                 :class "form-control"
                 :type "number"
                 :step 1
                 :min 0
                 :placeholder (cell= (vocab :groundwaterlevel-placeholder s/lang))
                 :value groundwaterlevel
                 :on-change #(groundwaterlevel! (js/parseFloat (val-id groundwaterlevel-id))))
               (span :class "input-group-addon" "cm"))))

         #_(fieldset
           (legend (text "~(vocab :address-fieldset-label s/lang)"))

           (div
             :toggle edit?

             (button
               ;:style "float:right"
               :class "btn btn-warning"
               :click #(s/create-new-farm-address @id)
               (text "~(vocab :new-address-button-label s/lang)"))

             (hr))

           (div
             (loop-tpl
               :bindings [{db-id :db/id
                           street :address/street
                           postal-code :address/postal-code
                           city :address/city
                           city-part :address/city-part
                           municipality :address/municipality
                           municipality-short :address/municipality-short
                           state :address/state
                           state-short :state-short
                           country :address/country
                           country-short :address/country-short
                           :as address} addresses]
               ;:bind-ids [farm-id]
               (div

                 (button
                   :toggle edit?
                   :style "float:right"
                   :class "btn btn-danger"
                   :click #(s/delete-db-entity @db-id)
                   (text "~(vocab :delete-address-button-label s/lang)"))

                 (addr/address
                   :fields {:street street :street! #(s/update-db-entity @db-id :address/street %)
                            :postal-code postal-code :postal-code! #(s/update-db-entity @db-id :address/postal-code %)
                            :city city :city! #(s/update-db-entity @db-id :address/city %)
                            :city-part city-part :city-part! #(s/update-db-entity @db-id :address/city-part %)
                            :municipality municipality :municipality! #(s/update-db-entity @db-id :address/municipality %)
                            :municipality-short municipality-short :municipality-short! #(s/update-db-entity @db-id :address/municipality-short %)
                            :state state :state! #(s/update-db-entity @db-id :address/state %)
                            :state-short state-short :state-short! #(s/update-db-entity @db-id :address/state-short %)
                            :country country :country! #(s/update-db-entity @db-id :address/country %)
                            :country-short country-short :country-short! #(s/update-db-entity @db-id :address/country-short %)}
                   :opts {:edit? edit?
                          :label-cols (+ label-cols 2)
                          :value-cols value-cols})

                 (hr)

                 ))
             ))

         #_(bs/form-group
           (bs/control-label :col [:sm label-cols] :for notes-id (text "~(vocab :notes-label s/lang)"))
           (div
             :col [:xs 7]
             (p :toggle no-edit? :class "form-control-static" (text "~{notes}"))
             (textarea
               :id notes-id
               :toggle edit?
               :class "form-control"
               :rows 5
               :placeholder (cell= (vocab :notes-placeholder s/lang))
               :value notes
               :on-change #(notes! (val-id notes-id)))))

         #_(fieldset
           (legend (text "~(vocab :weather-data-fieldset-label s/lang)"))

           (bs/form-group
             (bs/control-label :col [:sm label-cols] :for weather-station-id
                               (text "~(vocab :weather-station-label s/lang)"))
             (div
               :col [:xs value-cols]
               (p :toggle no-edit? :class "form-control-static"
                  (text "~(or (:weather-station/name weather-station)
                  (:weather-station/id weather-station))"))
               (select
                 :toggle edit?
                 :id weather-station-id
                 :class "form-control"
                 :on-change #(weather-station! (js/parseInt (val-id weather-station-id)))
                 (option :value "" "")
                 (loop-tpl
                   :bindings [{ws-db-id :db/id
                               ws-id :weather-station/id
                               ws-name :weather-station/name}
                              (cell= (sort-by #(if-let [name (:weather-station/name %)]
                                                name
                                                (:weather-station/id %)) s/user-weather-stations))]
                   (option :value ws-db-id
                           :selected (cell= (= ws-id (:weather-station/id weather-station)))
                           (text "~{ws-name}")))))))

         )) (dissoc attrs :fields :opts) kids)))