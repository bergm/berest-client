(page "berest.html"
      (:require #_[ui.tabs :as tabs]
       [de.zalf.berest.client.hoplon.helper :as bh :refer [rcomp partial-kw]]
       [de.zalf.berest.client.hoplon.util :as util]

       [de.zalf.berest.client.hoplon.state :as s]
       [bootstrap-util :as bs]
       [ui.components :as uic]
       [ui.elements :as uie]
       [ui.bersim :as bersim]
       [ui.weather-stations :as weather-stations]
       [ui.crops :as crops]
       [ui.farms :as farms]
       [clojure.string :as str]
                #_[tailrecursion.hoplon.svg :as hsvg]
       [tailrecursion.hoplon.reload :refer [reload-all]]
       ))

(enable-console-print!)

#_(reload-all)

;; Live-reload when we're local
#_(when (-> js/window .-location .-hostname (= "localhost"))
  (reload-all 500))

(println "hostname: " (-> js/window .-location .-hostname))

(def server-url (condp = (-> js/window .-location .-hostname)
                  "" "http://localhost:3000/"
                  "localhost" "http://localhost:3000/"
                  "http://env-7945450.jelastic.dogado.eu/"
                  #_"https://berest-zalflsa.rhcloud.com/"))
#_(println "server-url: " server-url)

(defc edn-result nil)
#_(cell= (println "edn-result: " edn-result))



(def sum (partial reduce + 0))

(defc= soil-moistures-7 (:soil-moistures-7 edn-result))
(defc= prognosis (:prognosis edn-result))
(defc= inputs (:inputs edn-result))
(defc= days (range (-> inputs first :abs-day) (-> inputs last :abs-day)))

(defc= soil-moistures
       (mapv (fn [{:keys [abs-day soil-moistures
                          irrigation-amount] :as all}]
               {:abs-day    abs-day
                :sm-0-10    (sum (subvec (vec soil-moistures) 0 2))
                :sm-10-30   (sum (subvec (vec soil-moistures) 2 4))
                :sm-30-60   (sum (subvec (vec soil-moistures) 4 7))
                :sm-60-100  (sum (subvec (vec soil-moistures) 7 11))
                :sm-100-150 (sum (subvec (vec soil-moistures) 11 16))
                ;:sm-0-30  (sum (subvec (vec soil-moistures) 0 4))
                ;:sm-30-60 (sum (subvec (vec soil-moistures) 4 7))
                ;:sm-60-90 (sum (subvec (vec soil-moistures) 7 10))}
                })
             soil-moistures-7))




(defn error-alert
  [error]
  (js/alert (str "Error: " error)))


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


#_(defn highcharts-test
  []
  (let [container (by-id "hc-container")
        config {:title {:text "Monthly Average Temperature"
                        :x -20}
                :subtitle {:text "Source: WorldClimate.com"
                           :x -20}
                :xAxis {:categories ["Jan", "Feb", "Mar", "Apr", "May", "Jun",
                                     "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]}
                :yAxis {:title {:text "Temperature (°C)"}
                        :plotLines [{:value 0
                                     :width 1
                                     :color "#808080"}]}
                :tooltip {:valueSuffix "°C"}
                :legend {:layout "vertical"
                         :align "right"
                         :verticalAlign "middle"
                         :borderWidth 0}
                :series [{:name "Tokyo"
                          :data [7.0, 6.9, 9.5, 14.5, 18.2, 21.5, 25.2, 26.5, 23.3, 18.3, 13.9, 9.6]}
                         {:name "New York"
                          :data [-0.2, 0.8, 5.7, 11.3, 17.0, 22.0, 24.8, 24.1, 20.1, 14.1, 8.6, 2.5]}
                         {:name "Berlin"
                          :data [-0.9, 0.6, 3.5, 8.4, 13.5, 17.0, 18.6, 17.9, 14.3, 9.0, 3.9, 1.0]}
                         {:name "London"
                          :data [3.9, 4.2, 5.7, 8.5, 11.9, 15.2, 17.0, 16.6, 14.2, 10.3, 6.6, 4.8]}]}
        js-config (clj->js config)
        _ (println js-config)]
    (-> container js/jQuery (.highcharts ,,, js-config))))

#_(add-initfn! highcharts-test)

(s/login! "zalf" "fLAz")
#_(cell= (when logged-in? (s/init-after-login)))

(cell= (when (and s/logged-in? (not s/minimal-all-crops)) (s/load-minimal-all-crops)))
(cell= (when (and s/logged-in? (not s/static-state)) (s/load-static-state)))

(cell= (print (:trace s/error)))


(defn vocab
  "translatable vocabulary for this page"
  [element lang]
  (get-in {:page-name {:lang/de "BEREST"
                       :lang/en "BEREST"}
           :all-farms {:lang/de "Alle Betriebe"
                       :lang/en "all farms"}
           :dwd-weather-stations {:lang/de "DWD Wetterstationen"
                                  :lang/en "DWD weather stations"}}
          [element (or lang :lang/de)] "UNKNOWN element"))


#_(bs/bootstrap-page
  :class   "page4"
  :version "3.1.1"
  :title (vocab :page-name s/lang)
  (bs/navbar :opts [#_:inverse :fixed-top]
          (bs/container
            (bs/navbar-header
              (bs/navbar-toggle (button :type "button"))
              (span "Toggle Navigation")
              (bs/icon-bar (span))
              (bs/icon-bar (span))
              (bs/icon-bar (span))
              (bs/navbar-brand (a :href "demo2.html" "Question Test")))))
  (bs/navbar-collapse
    (bs/navbar-nav
      (a :href "demo2.html" "Home"))))

(html ;:ng-app "myApp"
  (head
    (meta :name "viewport"
          :content "width=device-width, initial-scale=1.0"
          :charset "UTF-8")
    (link :rel "stylesheet" :href "css/bootstrap.css")
    (link :rel "stylesheet" :href "//cdnjs.cloudflare.com/ajax/libs/moment.js/2.6.0/moment.min.js")
    (link :rel "stylesheet" :type "text/css" :href "css/berest.css")
    #_(link :rel "stylesheet" :href "css/variance-base.css")
    #_(link :rel "stylesheet" :href "css/charts.css")

    #_(link :rel "stylesheet" :href "//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css")
    #_(link :rel "stylesheet" :href "//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap-theme.min.css")
    #_(script :src "//netdna.bootstrapcdn.com/bootstrap/3.1.1/js/bootstrap.min.js")

    #_(script :src "js/highcharts.js")
    #_(script :src "js/modules/exporting.js")


    )




  (body

    #_(script :src "js/highcharts.js")
    #_(script :src "js/modules/exporting.js")

    (uic/top-nav-bar (cell= (vocab :page-name s/lang)))

    (uic/error-pane)

    (uic/loading-pane)

    (uic/login-pane)

    #_(div :id "hc-container" :style "min-width: 310px; height: 400px; margin: 0 auto")

    (div
      :id "content-pane"
      :do-toggle s/show-content?
      :class "container"
      :style "width:100%"

      (div
        :class "row"

        (uic/left-nav-bar)

        (div
          :id "main-content"
          :class "col-sm-10"



          (farms/farms-pane)

          (weather-stations/weather-stations-pane)

          (crops/crops-pane)

          (bersim/bersim-pane)
          ))

      (hr)

      )))
